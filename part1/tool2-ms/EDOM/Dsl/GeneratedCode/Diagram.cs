//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Empresa.MoneyManagerModel.MoneyManagerModelDiagram")]

namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainClass MoneyManagerModelDiagram
	/// Description for Empresa.MoneyManagerModel.MoneyManagerModelDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.MoneyManagerModelDiagram.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.MoneyManagerModelDiagram.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("da811c84-1a49-4e8f-9159-3a9f9019d168")]
	public partial class MoneyManagerModelDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Empresa.MoneyManagerModel.UserSpec)
			{
				global::Empresa.MoneyManagerModel.UserSpecShape newShape = new global::Empresa.MoneyManagerModel.UserSpecShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountSpec)
			{
				global::Empresa.MoneyManagerModel.AccountSpecShape newShape = new global::Empresa.MoneyManagerModel.AccountSpecShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.TransactionSpec)
			{
				global::Empresa.MoneyManagerModel.TransactionSpecShape newShape = new global::Empresa.MoneyManagerModel.TransactionSpecShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AttributeType)
			{
				global::Empresa.MoneyManagerModel.AttributeTypeShape newShape = new global::Empresa.MoneyManagerModel.AttributeTypeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.UserAttribute)
			{
				global::Empresa.MoneyManagerModel.UserAttributeShape newShape = new global::Empresa.MoneyManagerModel.UserAttributeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountAttribute)
			{
				global::Empresa.MoneyManagerModel.AccountAttributeShape newShape = new global::Empresa.MoneyManagerModel.AccountAttributeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.TransactionAttribute)
			{
				global::Empresa.MoneyManagerModel.TransactionAttributeShape newShape = new global::Empresa.MoneyManagerModel.TransactionAttributeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountGroupSpec)
			{
				global::Empresa.MoneyManagerModel.AccountGroupSpecSchape newShape = new global::Empresa.MoneyManagerModel.AccountGroupSpecSchape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.UserAccountAssociation)
			{
				global::Empresa.MoneyManagerModel.UserAccountAssociationShape newShape = new global::Empresa.MoneyManagerModel.UserAccountAssociationShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountTransactionAssociation)
			{
				global::Empresa.MoneyManagerModel.AccountTransactionAssociationShape newShape = new global::Empresa.MoneyManagerModel.AccountTransactionAssociationShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.CategorySpec)
			{
				global::Empresa.MoneyManagerModel.CategorySpecShape newShape = new global::Empresa.MoneyManagerModel.CategorySpecShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.CategoryAttribute)
			{
				global::Empresa.MoneyManagerModel.CategoryAttributeShape newShape = new global::Empresa.MoneyManagerModel.CategoryAttributeShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.CategoryTransactionAssociation)
			{
				global::Empresa.MoneyManagerModel.CategoryTransactionAssociationShape newShape = new global::Empresa.MoneyManagerModel.CategoryTransactionAssociationShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute)
			{
				global::Empresa.MoneyManagerModel.Incorporação newShape = new global::Empresa.MoneyManagerModel.Incorporação(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute)
			{
				global::Empresa.MoneyManagerModel.Incorporação newShape = new global::Empresa.MoneyManagerModel.Incorporação(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute)
			{
				global::Empresa.MoneyManagerModel.Incorporação newShape = new global::Empresa.MoneyManagerModel.Incorporação(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute)
			{
				global::Empresa.MoneyManagerModel.Incorporação newShape = new global::Empresa.MoneyManagerModel.Incorporação(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			if(element is global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation)
			{
				global::Empresa.MoneyManagerModel.Referência newShape = new global::Empresa.MoneyManagerModel.Referência(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Empresa.MoneyManagerModel.UserSpecShape.DecoratorsInitialized += UserSpecShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.AccountSpecShape.DecoratorsInitialized += AccountSpecShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.TransactionSpecShape.DecoratorsInitialized += TransactionSpecShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.AttributeTypeShape.DecoratorsInitialized += AttributeTypeShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.UserAttributeShape.DecoratorsInitialized += UserAttributeShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.AccountAttributeShape.DecoratorsInitialized += AccountAttributeShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.TransactionAttributeShape.DecoratorsInitialized += TransactionAttributeShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.AccountGroupSpecSchape.DecoratorsInitialized += AccountGroupSpecSchapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.UserAccountAssociationShape.DecoratorsInitialized += UserAccountAssociationShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.AccountTransactionAssociationShape.DecoratorsInitialized += AccountTransactionAssociationShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.CategorySpecShape.DecoratorsInitialized += CategorySpecShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.CategoryAttributeShape.DecoratorsInitialized += CategoryAttributeShapeDecoratorMap.OnDecoratorsInitialized;
			global::Empresa.MoneyManagerModel.CategoryTransactionAssociationShape.DecoratorsInitialized += CategoryTransactionAssociationShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UserSpecShape.
		/// </summary>
		internal static partial class UserSpecShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for UserSpecShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.UserSpec.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AccountSpecShape.
		/// </summary>
		internal static partial class AccountSpecShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AccountSpecShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.AccountSpec.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for TransactionSpecShape.
		/// </summary>
		internal static partial class TransactionSpecShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for TransactionSpecShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.TransactionSpec.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.TransactionSpec.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AttributeTypeShape.
		/// </summary>
		internal static partial class AttributeTypeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AttributeTypeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.AttributeType.TextDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TextDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UserAttributeShape.
		/// </summary>
		internal static partial class UserAttributeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for UserAttributeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.UserAttribute.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AccountAttributeShape.
		/// </summary>
		internal static partial class AccountAttributeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AccountAttributeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.AccountAttribute.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for TransactionAttributeShape.
		/// </summary>
		internal static partial class TransactionAttributeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for TransactionAttributeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.TransactionAttribute.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AccountGroupSpecSchape.
		/// </summary>
		internal static partial class AccountGroupSpecSchapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AccountGroupSpecSchape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.AccountGroupSpec.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UserAccountAssociationShape.
		/// </summary>
		internal static partial class UserAccountAssociationShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for UserAccountAssociationShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.UserAccountAssociation.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AccountTransactionAssociationShape.
		/// </summary>
		internal static partial class AccountTransactionAssociationShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AccountTransactionAssociationShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.AccountTransactionAssociation.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CategorySpecShape.
		/// </summary>
		internal static partial class CategorySpecShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CategorySpecShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.CategorySpec.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CategoryAttributeShape.
		/// </summary>
		internal static partial class CategoryAttributeShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CategoryAttributeShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.CategoryAttribute.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CategoryTransactionAssociationShape.
		/// </summary>
		internal static partial class CategoryTransactionAssociationShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CategoryTransactionAssociationShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Empresa.MoneyManagerModel.CategoryTransactionAssociation.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::Empresa.MoneyManagerModel.AccAttAttTypeConnectAction accAttAttTypeConnectAction;
		private global::Empresa.MoneyManagerModel.TransAttAttTypeConnectAction transAttAttTypeConnectAction;
		private global::Empresa.MoneyManagerModel.UserAttAttTypeConnectAction userAttAttTypeConnectAction;
		private global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpecConnectAction accountGroupSpecReferencesAccountSpecConnectAction;
		private global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeTypeConnectAction categoryAttributeReferencesAttributeTypeConnectAction;
		private global::Empresa.MoneyManagerModel.UserSpecTemUserAttributeConnectAction userSpecTemUserAttributeConnectAction;
		private global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociationConnectAction accountSpecReferencesUserAccountAssociationConnectAction;
		private global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociationConnectAction accountSpecReferencesAccountTransactionAssociationConnectAction;
		private global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociationConnectAction transactionSpecReferencesAccountTransactionAssociationConnectAction;
		private global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociationConnectAction categorySpecReferencesCategoryTransactionAssociationConnectAction;
		private global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociationConnectAction transactionSpecReferencesCategoryTransactionAssociationConnectAction;
		private global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociationConnectAction userSpecReferencesUserAccountAssociationConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.AccAttAttTypeFilterString))
				{
					if (this.accAttAttTypeConnectAction == null)
					{
						this.accAttAttTypeConnectAction = new global::Empresa.MoneyManagerModel.AccAttAttTypeConnectAction(this);
						this.accAttAttTypeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.accAttAttTypeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.TransAttAttTypeFilterString))
				{
					if (this.transAttAttTypeConnectAction == null)
					{
						this.transAttAttTypeConnectAction = new global::Empresa.MoneyManagerModel.TransAttAttTypeConnectAction(this);
						this.transAttAttTypeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.transAttAttTypeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.UserAttAttTypeFilterString))
				{
					if (this.userAttAttTypeConnectAction == null)
					{
						this.userAttAttTypeConnectAction = new global::Empresa.MoneyManagerModel.UserAttAttTypeConnectAction(this);
						this.userAttAttTypeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.userAttAttTypeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.AccountGroupSpecReferencesAccountSpecFilterString))
				{
					if (this.accountGroupSpecReferencesAccountSpecConnectAction == null)
					{
						this.accountGroupSpecReferencesAccountSpecConnectAction = new global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpecConnectAction(this);
						this.accountGroupSpecReferencesAccountSpecConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.accountGroupSpecReferencesAccountSpecConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.CategoryAttributeReferencesAttributeTypeFilterString))
				{
					if (this.categoryAttributeReferencesAttributeTypeConnectAction == null)
					{
						this.categoryAttributeReferencesAttributeTypeConnectAction = new global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeTypeConnectAction(this);
						this.categoryAttributeReferencesAttributeTypeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.categoryAttributeReferencesAttributeTypeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.UserSpecTemUserAttributeFilterString))
				{
					if (this.userSpecTemUserAttributeConnectAction == null)
					{
						this.userSpecTemUserAttributeConnectAction = new global::Empresa.MoneyManagerModel.UserSpecTemUserAttributeConnectAction(this);
						this.userSpecTemUserAttributeConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.userSpecTemUserAttributeConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.AccountSpecReferencesUserAccountAssociationFilterString))
				{
					if (this.accountSpecReferencesUserAccountAssociationConnectAction == null)
					{
						this.accountSpecReferencesUserAccountAssociationConnectAction = new global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociationConnectAction(this);
						this.accountSpecReferencesUserAccountAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.accountSpecReferencesUserAccountAssociationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.AccountSpecReferencesAccountTransactionAssociationFilterString))
				{
					if (this.accountSpecReferencesAccountTransactionAssociationConnectAction == null)
					{
						this.accountSpecReferencesAccountTransactionAssociationConnectAction = new global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociationConnectAction(this);
						this.accountSpecReferencesAccountTransactionAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.accountSpecReferencesAccountTransactionAssociationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.TransactionSpecReferencesAccountTransactionAssociationFilterString))
				{
					if (this.transactionSpecReferencesAccountTransactionAssociationConnectAction == null)
					{
						this.transactionSpecReferencesAccountTransactionAssociationConnectAction = new global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociationConnectAction(this);
						this.transactionSpecReferencesAccountTransactionAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.transactionSpecReferencesAccountTransactionAssociationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.CategorySpecReferencesCategoryTransactionAssociationFilterString))
				{
					if (this.categorySpecReferencesCategoryTransactionAssociationConnectAction == null)
					{
						this.categorySpecReferencesCategoryTransactionAssociationConnectAction = new global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociationConnectAction(this);
						this.categorySpecReferencesCategoryTransactionAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.categorySpecReferencesCategoryTransactionAssociationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.TransactionSpecReferencesCategoryTransactionAssociationFilterString))
				{
					if (this.transactionSpecReferencesCategoryTransactionAssociationConnectAction == null)
					{
						this.transactionSpecReferencesCategoryTransactionAssociationConnectAction = new global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociationConnectAction(this);
						this.transactionSpecReferencesCategoryTransactionAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.transactionSpecReferencesCategoryTransactionAssociationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Empresa.MoneyManagerModel.MoneyManagerModelToolboxHelper.UserSpecReferencesUserAccountAssociationFilterString))
				{
					if (this.userSpecReferencesUserAccountAssociationConnectAction == null)
					{
						this.userSpecReferencesUserAccountAssociationConnectAction = new global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociationConnectAction(this);
						this.userSpecReferencesUserAccountAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.userSpecReferencesUserAccountAssociationConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.accAttAttTypeConnectAction != null)
					{
						this.accAttAttTypeConnectAction.Dispose();
						this.accAttAttTypeConnectAction = null;
					}
					if(this.transAttAttTypeConnectAction != null)
					{
						this.transAttAttTypeConnectAction.Dispose();
						this.transAttAttTypeConnectAction = null;
					}
					if(this.userAttAttTypeConnectAction != null)
					{
						this.userAttAttTypeConnectAction.Dispose();
						this.userAttAttTypeConnectAction = null;
					}
					if(this.accountGroupSpecReferencesAccountSpecConnectAction != null)
					{
						this.accountGroupSpecReferencesAccountSpecConnectAction.Dispose();
						this.accountGroupSpecReferencesAccountSpecConnectAction = null;
					}
					if(this.categoryAttributeReferencesAttributeTypeConnectAction != null)
					{
						this.categoryAttributeReferencesAttributeTypeConnectAction.Dispose();
						this.categoryAttributeReferencesAttributeTypeConnectAction = null;
					}
					if(this.userSpecTemUserAttributeConnectAction != null)
					{
						this.userSpecTemUserAttributeConnectAction.Dispose();
						this.userSpecTemUserAttributeConnectAction = null;
					}
					if(this.accountSpecReferencesUserAccountAssociationConnectAction != null)
					{
						this.accountSpecReferencesUserAccountAssociationConnectAction.Dispose();
						this.accountSpecReferencesUserAccountAssociationConnectAction = null;
					}
					if(this.accountSpecReferencesAccountTransactionAssociationConnectAction != null)
					{
						this.accountSpecReferencesAccountTransactionAssociationConnectAction.Dispose();
						this.accountSpecReferencesAccountTransactionAssociationConnectAction = null;
					}
					if(this.transactionSpecReferencesAccountTransactionAssociationConnectAction != null)
					{
						this.transactionSpecReferencesAccountTransactionAssociationConnectAction.Dispose();
						this.transactionSpecReferencesAccountTransactionAssociationConnectAction = null;
					}
					if(this.categorySpecReferencesCategoryTransactionAssociationConnectAction != null)
					{
						this.categorySpecReferencesCategoryTransactionAssociationConnectAction.Dispose();
						this.categorySpecReferencesCategoryTransactionAssociationConnectAction = null;
					}
					if(this.transactionSpecReferencesCategoryTransactionAssociationConnectAction != null)
					{
						this.transactionSpecReferencesCategoryTransactionAssociationConnectAction.Dispose();
						this.transactionSpecReferencesCategoryTransactionAssociationConnectAction = null;
					}
					if(this.userSpecReferencesUserAccountAssociationConnectAction != null)
					{
						this.userSpecReferencesUserAccountAssociationConnectAction.Dispose();
						this.userSpecReferencesUserAccountAssociationConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// MoneyManagerModelDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda811c84, 0x1a49, 0x4e8f, 0x91, 0x59, 0x3a, 0x9f, 0x90, 0x19, 0xd1, 0x68);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MoneyManagerModelDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MoneyManagerModelDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserSpec), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategoryTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategoryAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategorySpec), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserAccountAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountGroupSpec), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AttributeType), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionSpec), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountSpec), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.UserSpec)
				{
					parentElement = GetParentForUserSpec((global::Empresa.MoneyManagerModel.UserSpec)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.CategoryTransactionAssociation)
				{
					parentElement = GetParentForCategoryTransactionAssociation((global::Empresa.MoneyManagerModel.CategoryTransactionAssociation)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.CategoryAttribute)
				{
					parentElement = GetParentForCategoryAttribute((global::Empresa.MoneyManagerModel.CategoryAttribute)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.CategorySpec)
				{
					parentElement = GetParentForCategorySpec((global::Empresa.MoneyManagerModel.CategorySpec)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.AccountTransactionAssociation)
				{
					parentElement = GetParentForAccountTransactionAssociation((global::Empresa.MoneyManagerModel.AccountTransactionAssociation)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.UserAccountAssociation)
				{
					parentElement = GetParentForUserAccountAssociation((global::Empresa.MoneyManagerModel.UserAccountAssociation)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.AccountGroupSpec)
				{
					parentElement = GetParentForAccountGroupSpec((global::Empresa.MoneyManagerModel.AccountGroupSpec)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.TransactionAttribute)
				{
					parentElement = GetParentForTransactionAttribute((global::Empresa.MoneyManagerModel.TransactionAttribute)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.AccountAttribute)
				{
					parentElement = GetParentForAccountAttribute((global::Empresa.MoneyManagerModel.AccountAttribute)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.UserAttribute)
				{
					parentElement = GetParentForUserAttribute((global::Empresa.MoneyManagerModel.UserAttribute)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.AttributeType)
				{
					parentElement = GetParentForAttributeType((global::Empresa.MoneyManagerModel.AttributeType)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.TransactionSpec)
				{
					parentElement = GetParentForTransactionSpec((global::Empresa.MoneyManagerModel.TransactionSpec)childElement);
				} else
				if(childElement is global::Empresa.MoneyManagerModel.AccountSpec)
				{
					parentElement = GetParentForAccountSpec((global::Empresa.MoneyManagerModel.AccountSpec)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForUserSpec( global::Empresa.MoneyManagerModel.UserSpec root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForAccountSpec( global::Empresa.MoneyManagerModel.AccountSpec root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForTransactionSpec( global::Empresa.MoneyManagerModel.TransactionSpec root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForAttributeType( global::Empresa.MoneyManagerModel.AttributeType root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForUserAttribute( global::Empresa.MoneyManagerModel.UserAttribute root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.UserSpec root2 = root.UserSpec;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Empresa.MoneyManagerModel.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForAccountAttribute( global::Empresa.MoneyManagerModel.AccountAttribute root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.AccountSpec root2 = root.AccountSpec;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Empresa.MoneyManagerModel.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForTransactionAttribute( global::Empresa.MoneyManagerModel.TransactionAttribute root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.TransactionSpec root2 = root.TransactionSpec;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Empresa.MoneyManagerModel.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForAccountGroupSpec( global::Empresa.MoneyManagerModel.AccountGroupSpec root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForUserAccountAssociation( global::Empresa.MoneyManagerModel.UserAccountAssociation root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForAccountTransactionAssociation( global::Empresa.MoneyManagerModel.AccountTransactionAssociation root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForCategorySpec( global::Empresa.MoneyManagerModel.CategorySpec root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForCategoryAttribute( global::Empresa.MoneyManagerModel.CategoryAttribute root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.CategorySpec root2 = root.CategorySpec;
				if ( root2 == null ) return null;
				// Segments 2 and 3
				global::Empresa.MoneyManagerModel.Model result = root2.Model;
				if ( result == null ) return null;
				return result;
			}
			public static global::Empresa.MoneyManagerModel.Model GetParentForCategoryTransactionAssociation( global::Empresa.MoneyManagerModel.CategoryTransactionAssociation root )
			{
				// Segments 0 and 1
				global::Empresa.MoneyManagerModel.Model result = root.Model;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::Empresa.MoneyManagerModel.MoneyManagerModelDiagram diagram = linkShape.Diagram as global::Empresa.MoneyManagerModel.MoneyManagerModelDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
