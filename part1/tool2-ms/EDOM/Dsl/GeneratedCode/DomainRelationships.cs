//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ExampleModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ExampleModelHasElements.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ExampleModelHasElements.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("447014ae-8469-42ba-8145-6b6abea1c041")]
	public partial class ExampleModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x447014ae, 0x8469, 0x42ba, 0x81, 0x45, 0x6b, 0x6a, 0xbe, 0xa1, 0xc0, 0x41);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasElements link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">UserSpec to use as the target of the relationship.</param>
		public ExampleModelHasElements(Model source, UserSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasElements.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x7ead59ab, 0xd401, 0x4d57, 0xb7, 0xe3, 0x54, 0xe8, 0x2f, 0xbb, 0x61, 0x81);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ExampleModelHasElements/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ExampleModelHasElements/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ExampleModelHasElements/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7ead59ab-d401-4d57-b7e3-54e82fbb6181")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a UserSpec
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(UserSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(UserSpec element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xc5c00764, 0xadf3, 0x4fd9, 0x96, 0x41, 0x80, 0xa2, 0x36, 0xbc, 0x52, 0xb7);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ExampleModelHasElements/Element.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ExampleModelHasElements/Element.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ExampleModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c5c00764-adf3-4fd9-9641-80a236bc52b7")]
		public virtual UserSpec Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a Model
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UserSpec> GetElements(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UserSpec>, UserSpec>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ExampleModelHasElements links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ExampleModelHasElements> GetLinksToElements ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ExampleModelHasElements>(modelInstance, global::Empresa.MoneyManagerModel.ExampleModelHasElements.ModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ExampleModelHasElements link to a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ExampleModelHasElements GetLinkToModel (global::Empresa.MoneyManagerModel.UserSpec elementInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ExampleModelHasElements>(elementInstance, global::Empresa.MoneyManagerModel.ExampleModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasElements instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasElements links between a given Model and a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ExampleModelHasElements> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.UserSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ExampleModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ExampleModelHasElements>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ExampleModelHasElements>(source, global::Empresa.MoneyManagerModel.ExampleModelHasElements.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasElements link between a given Modeland a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ExampleModelHasElements GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.UserSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ExampleModelHasElements>(source, global::Empresa.MoneyManagerModel.ExampleModelHasElements.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelTemAccountSpec
	/// Descrição de Empresa.MoneyManagerModel.ModelTemAccountSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b97655a9-fbb2-4916-b1b3-6adace669cb6")]
	public partial class ModelTemAccountSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemAccountSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb97655a9, 0xfbb2, 0x4916, 0xb1, 0xb3, 0x6a, 0xda, 0xce, 0x66, 0x9c, 0xb6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemAccountSpec link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">AccountSpec to use as the target of the relationship.</param>
		public ModelTemAccountSpec(Model source, AccountSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemAccountSpec.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemAccountSpec.AccountSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemAccountSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemAccountSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemAccountSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemAccountSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xbd509ce8, 0x516a, 0x436a, 0xa9, 0xc2, 0x8b, 0x7d, 0x9b, 0xd6, 0x61, 0x48);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de Empresa.MoneyManagerModel.ModelTemAccountSpec.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAccountSpec/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAccountSpec/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelTemAccountSpec/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bd509ce8-516a-436a-a9c2-8b7d9bd66148")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a AccountSpec
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(AccountSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountSpecDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(AccountSpec element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountSpecDomainRoleId, newModel);
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0xcfd16509, 0x7091, 0x4253, 0x8f, 0x49, 0xb7, 0xf5, 0x88, 0x8d, 0x56, 0x43);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Descrição de Empresa.MoneyManagerModel.ModelTemAccountSpec.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAccountSpec/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAccountSpec/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelTemAccountSpec/AccountSpec.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cfd16509-7091-4253-8f49-b7f5888d5643")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpec of a Model
		/// <summary>
		/// Gets a list of AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountSpec> GetAccountSpec(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountSpec>, AccountSpec>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemAccountSpec links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> GetLinksToAccountSpec ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>(modelInstance, global::Empresa.MoneyManagerModel.ModelTemAccountSpec.ModelDomainRoleId);
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the ModelTemAccountSpec link to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelTemAccountSpec GetLinkToModel (global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>(accountSpecInstance, global::Empresa.MoneyManagerModel.ModelTemAccountSpec.AccountSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemAccountSpec instance accessors
		
		/// <summary>
		/// Get any ModelTemAccountSpec links between a given Model and a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AccountSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>(source, global::Empresa.MoneyManagerModel.ModelTemAccountSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelTemAccountSpec link in links )
			{
				if ( target.Equals(link.AccountSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemAccountSpec link between a given Modeland a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelTemAccountSpec GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AccountSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>(source, global::Empresa.MoneyManagerModel.ModelTemAccountSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelTemAccountSpec link in links )
			{
				if ( target.Equals(link.AccountSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasTransactionSpec
	/// Description for Empresa.MoneyManagerModel.ModelHasTransactionSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("71d817dc-9158-4a9d-adca-017406a8e6dc")]
	public partial class ModelHasTransactionSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasTransactionSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71d817dc, 0x9158, 0x4a9d, 0xad, 0xca, 0x01, 0x74, 0x06, 0xa8, 0xe6, 0xdc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasTransactionSpec link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">TransactionSpec to use as the target of the relationship.</param>
		public ModelHasTransactionSpec(Model source, TransactionSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasTransactionSpec.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasTransactionSpec.TransactionSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasTransactionSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasTransactionSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasTransactionSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasTransactionSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x7946605b, 0x433c, 0x4abd, 0x8e, 0x14, 0xbc, 0x32, 0x84, 0x26, 0xb6, 0x55);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Empresa.MoneyManagerModel.ModelHasTransactionSpec.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasTransactionSpec/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7946605b-433c-4abd-8e14-bc328426b655")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a TransactionSpec
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(TransactionSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionSpecDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(TransactionSpec element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionSpecDomainRoleId, newModel);
		}
		#endregion
		#region TransactionSpec domain role code
		
		/// <summary>
		/// TransactionSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSpecDomainRoleId = new global::System.Guid(0xaae12d88, 0x3f55, 0x4e45, 0x92, 0xee, 0xbd, 0x2b, 0x58, 0xda, 0x31, 0x22);
		
		/// <summary>
		/// DomainRole TransactionSpec
		/// Description for
		/// Empresa.MoneyManagerModel.ModelHasTransactionSpec.TransactionSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec/TransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec/TransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasTransactionSpec/TransactionSpec.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aae12d88-3f55-4e45-92ee-bd2b58da3122")]
		public virtual TransactionSpec TransactionSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSpec of a Model
		/// <summary>
		/// Gets a list of TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionSpec> GetTransactionSpec(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionSpec>, TransactionSpec>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasTransactionSpec links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> GetLinksToTransactionSpec ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.ModelDomainRoleId);
		}
		#endregion
		#region TransactionSpec link accessor
		/// <summary>
		/// Get the ModelHasTransactionSpec link to a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasTransactionSpec GetLinkToModel (global::Empresa.MoneyManagerModel.TransactionSpec transactionSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>(transactionSpecInstance, global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.TransactionSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasTransactionSpec instance accessors
		
		/// <summary>
		/// Get any ModelHasTransactionSpec links between a given Model and a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.TransactionSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>(source, global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasTransactionSpec link in links )
			{
				if ( target.Equals(link.TransactionSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasTransactionSpec link between a given Modeland a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasTransactionSpec GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.TransactionSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>(source, global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasTransactionSpec link in links )
			{
				if ( target.Equals(link.TransactionSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasAttributeType
	/// Description for Empresa.MoneyManagerModel.ModelHasAttributeType
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a48dae22-17e7-47a6-87a6-5fd7184d1533")]
	public partial class ModelHasAttributeType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasAttributeType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa48dae22, 0x17e7, 0x47a6, 0x87, 0xa6, 0x5f, 0xd7, 0x18, 0x4d, 0x15, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasAttributeType link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public ModelHasAttributeType(Model source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasAttributeType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasAttributeType.AttributeTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAttributeType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAttributeType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAttributeType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAttributeType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x1f1e59fa, 0xe8b6, 0x4e97, 0x9f, 0x1b, 0x95, 0x89, 0x4e, 0x70, 0xf7, 0xe9);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Empresa.MoneyManagerModel.ModelHasAttributeType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAttributeType/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAttributeType/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeType", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasAttributeType/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1f1e59fa-e8b6-4e97-9f1b-95894e70f7e9")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a AttributeType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypeDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(AttributeType element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypeDomainRoleId, newModel);
		}
		#endregion
		#region AttributeType domain role code
		
		/// <summary>
		/// AttributeType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypeDomainRoleId = new global::System.Guid(0x6a55a51f, 0x4c0e, 0x4cca, 0xaa, 0xcf, 0x31, 0x3f, 0x42, 0x7f, 0x87, 0x7c);
		
		/// <summary>
		/// DomainRole AttributeType
		/// Description for Empresa.MoneyManagerModel.ModelHasAttributeType.AttributeType
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAttributeType/AttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAttributeType/AttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasAttributeType/AttributeType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6a55a51f-4c0e-4cca-aacf-313f427f877c")]
		public virtual AttributeType AttributeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeType of a Model
		/// <summary>
		/// Gets a list of AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AttributeType> GetAttributeType(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AttributeType>, AttributeType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasAttributeType links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasAttributeType> GetLinksToAttributeType ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAttributeType>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasAttributeType.ModelDomainRoleId);
		}
		#endregion
		#region AttributeType link accessor
		/// <summary>
		/// Get the ModelHasAttributeType link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasAttributeType GetLinkToModel (global::Empresa.MoneyManagerModel.AttributeType attributeTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAttributeType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAttributeType>(attributeTypeInstance, global::Empresa.MoneyManagerModel.ModelHasAttributeType.AttributeTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasAttributeType instance accessors
		
		/// <summary>
		/// Get any ModelHasAttributeType links between a given Model and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasAttributeType> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasAttributeType> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasAttributeType>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAttributeType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAttributeType>(source, global::Empresa.MoneyManagerModel.ModelHasAttributeType.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasAttributeType link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasAttributeType link between a given Modeland a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasAttributeType GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAttributeType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAttributeType>(source, global::Empresa.MoneyManagerModel.ModelHasAttributeType.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasAttributeType link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelTemAssociation
	/// Descrição de Empresa.MoneyManagerModel.ModelTemAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5ef8b147-23b4-4f75-88f0-2b0d1a54117e")]
	public partial class ModelTemAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5ef8b147, 0x23b4, 0x4f75, 0x88, 0xf0, 0x2b, 0x0d, 0x1a, 0x54, 0x11, 0x7e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemAssociation link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">Association to use as the target of the relationship.</param>
		public ModelTemAssociation(Model source, Association target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemAssociation.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemAssociation.AssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x173aee40, 0xf116, 0x4169, 0x9a, 0xc3, 0x37, 0x44, 0x8f, 0x80, 0xc2, 0xe5);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de Empresa.MoneyManagerModel.ModelTemAssociation.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAssociation/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAssociation/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Association", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelTemAssociation/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("173aee40-f116-4169-9ac3-37448f80c2e5")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a Association
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(Association element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(Association element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationDomainRoleId, newModel);
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0xfcebb10b, 0x2866, 0x4a93, 0xa7, 0xf4, 0xde, 0x1c, 0xf6, 0x9c, 0x32, 0x64);
		
		/// <summary>
		/// DomainRole Association
		/// Descrição de Empresa.MoneyManagerModel.ModelTemAssociation.Association
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAssociation/Association.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAssociation/Association.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelTemAssociation/Association.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fcebb10b-2866-4a93-a7f4-de1cf69c3264")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Association of a Model
		/// <summary>
		/// Gets a list of Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Association> GetAssociation(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Association>, Association>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemAssociation links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelTemAssociation> GetLinksToAssociation ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAssociation>(modelInstance, global::Empresa.MoneyManagerModel.ModelTemAssociation.ModelDomainRoleId);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the ModelTemAssociation link to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelTemAssociation GetLinkToModel (global::Empresa.MoneyManagerModel.Association associationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAssociation>(associationInstance, global::Empresa.MoneyManagerModel.ModelTemAssociation.AssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Association not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemAssociation instance accessors
		
		/// <summary>
		/// Get any ModelTemAssociation links between a given Model and a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelTemAssociation> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.Association target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelTemAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelTemAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAssociation>(source, global::Empresa.MoneyManagerModel.ModelTemAssociation.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelTemAssociation link in links )
			{
				if ( target.Equals(link.Association) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemAssociation link between a given Modeland a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelTemAssociation GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.Association target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAssociation>(source, global::Empresa.MoneyManagerModel.ModelTemAssociation.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelTemAssociation link in links )
			{
				if ( target.Equals(link.Association) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship UserSpecTemUserAttribute
	/// Descrição de Empresa.MoneyManagerModel.UserSpecTemUserAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c4053548-df3b-4d73-bdda-f20e22055e17")]
	public partial class UserSpecTemUserAttribute : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserSpecTemUserAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc4053548, 0xdf3b, 0x4d73, 0xbd, 0xda, 0xf2, 0x0e, 0x22, 0x05, 0x5e, 0x17);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserSpecTemUserAttribute link in the same Partition as the given UserSpec
		/// </summary>
		/// <param name="source">UserSpec to use as the source of the relationship.</param>
		/// <param name="target">UserAttribute to use as the target of the relationship.</param>
		public UserSpecTemUserAttribute(UserSpec source, UserAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserSpecTemUserAttribute.UserSpecDomainRoleId, source), new DslModeling::RoleAssignment(UserSpecTemUserAttribute.UserAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserSpecTemUserAttribute(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserSpecTemUserAttribute(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserSpecTemUserAttribute(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserSpecTemUserAttribute(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UserSpec domain role code
		
		/// <summary>
		/// UserSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserSpecDomainRoleId = new global::System.Guid(0xc3dd25ae, 0xfc31, 0x45be, 0x8b, 0x95, 0xdf, 0xa7, 0x14, 0xc1, 0x3f, 0x2d);
		
		/// <summary>
		/// DomainRole UserSpec
		/// Descrição de Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UserAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c3dd25ae-fc31-45be-8b95-dfa714c13f2d")]
		public virtual UserSpec UserSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserSpec of a UserAttribute
		/// <summary>
		/// Gets UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UserSpec GetUserSpec(UserAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserAttributeDomainRoleId) as UserSpec;
		}
		
		/// <summary>
		/// Sets UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUserSpec(UserAttribute element, UserSpec newUserSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserAttributeDomainRoleId, newUserSpec);
		}
		#endregion
		#region UserAttribute domain role code
		
		/// <summary>
		/// UserAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserAttributeDomainRoleId = new global::System.Guid(0x14d6ad66, 0xa178, 0x4b26, 0xb9, 0xa9, 0x94, 0x23, 0xd8, 0x38, 0x03, 0xa2);
		
		/// <summary>
		/// DomainRole UserAttribute
		/// Descrição de Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UserSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("14d6ad66-a178-4b26-b9a9-9423d83803a2")]
		public virtual UserAttribute UserAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserAttribute of a UserSpec
		/// <summary>
		/// Gets a list of UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UserAttribute> GetUserAttribute(UserSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UserAttribute>, UserAttribute>(element, UserSpecDomainRoleId);
		}
		#endregion
		#region UserSpec link accessor
		/// <summary>
		/// Get the list of UserSpecTemUserAttribute links to a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> GetLinksToUserAttribute ( global::Empresa.MoneyManagerModel.UserSpec userSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>(userSpecInstance, global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserSpecDomainRoleId);
		}
		#endregion
		#region UserAttribute link accessor
		/// <summary>
		/// Get the UserSpecTemUserAttribute link to a UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute GetLinkToUserSpec (global::Empresa.MoneyManagerModel.UserAttribute userAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>(userAttributeInstance, global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UserAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UserSpecTemUserAttribute instance accessors
		
		/// <summary>
		/// Get any UserSpecTemUserAttribute links between a given UserSpec and a UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> GetLinks( global::Empresa.MoneyManagerModel.UserSpec source, global::Empresa.MoneyManagerModel.UserAttribute target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>(source, global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute link in links )
			{
				if ( target.Equals(link.UserAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserSpecTemUserAttribute link between a given UserSpecand a UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute GetLink( global::Empresa.MoneyManagerModel.UserSpec source, global::Empresa.MoneyManagerModel.UserAttribute target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>(source, global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute link in links )
			{
				if ( target.Equals(link.UserAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AccountSpecTemAccountAttribute
	/// Descrição de Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("32c24c76-41a9-4bdd-83d5-c0942d0c7abe")]
	public partial class AccountSpecTemAccountAttribute : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AccountSpecTemAccountAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32c24c76, 0x41a9, 0x4bdd, 0x83, 0xd5, 0xc0, 0x94, 0x2d, 0x0c, 0x7a, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AccountSpecTemAccountAttribute link in the same Partition as the given AccountSpec
		/// </summary>
		/// <param name="source">AccountSpec to use as the source of the relationship.</param>
		/// <param name="target">AccountAttribute to use as the target of the relationship.</param>
		public AccountSpecTemAccountAttribute(AccountSpec source, AccountAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AccountSpecTemAccountAttribute.AccountSpecDomainRoleId, source), new DslModeling::RoleAssignment(AccountSpecTemAccountAttribute.AccountAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecTemAccountAttribute(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecTemAccountAttribute(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecTemAccountAttribute(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecTemAccountAttribute(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0xa1c3e4e6, 0xf741, 0x4a30, 0x8b, 0xed, 0x2a, 0x38, 0x36, 0x65, 0x22, 0xdd);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a1c3e4e6-f741-4a30-8bed-2a38366522dd")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpec of a AccountAttribute
		/// <summary>
		/// Gets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountSpec GetAccountSpec(AccountAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountAttributeDomainRoleId) as AccountSpec;
		}
		
		/// <summary>
		/// Sets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountSpec(AccountAttribute element, AccountSpec newAccountSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountAttributeDomainRoleId, newAccountSpec);
		}
		#endregion
		#region AccountAttribute domain role code
		
		/// <summary>
		/// AccountAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountAttributeDomainRoleId = new global::System.Guid(0xaf51eae4, 0xc13e, 0x4dcc, 0x9f, 0x8d, 0x55, 0x99, 0x8a, 0x89, 0xf0, 0x2b);
		
		/// <summary>
		/// DomainRole AccountAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AccountSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("af51eae4-c13e-4dcc-9f8d-55998a89f02b")]
		public virtual AccountAttribute AccountAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountAttribute of a AccountSpec
		/// <summary>
		/// Gets a list of AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountAttribute> GetAccountAttribute(AccountSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountAttribute>, AccountAttribute>(element, AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the list of AccountSpecTemAccountAttribute links to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> GetLinksToAccountAttribute ( global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>(accountSpecInstance, global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountAttribute link accessor
		/// <summary>
		/// Get the AccountSpecTemAccountAttribute link to a AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute GetLinkToAccountSpec (global::Empresa.MoneyManagerModel.AccountAttribute accountAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>(accountAttributeInstance, global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountSpecTemAccountAttribute instance accessors
		
		/// <summary>
		/// Get any AccountSpecTemAccountAttribute links between a given AccountSpec and a AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> GetLinks( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.AccountAttribute target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>(source, global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute link in links )
			{
				if ( target.Equals(link.AccountAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AccountSpecTemAccountAttribute link between a given AccountSpecand a AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute GetLink( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.AccountAttribute target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>(source, global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute link in links )
			{
				if ( target.Equals(link.AccountAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship TransactionSpecTemTransactionAttribute
	/// Descrição de Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("de7c37fc-e9b3-48b4-b7c6-b98c33363cb7")]
	public partial class TransactionSpecTemTransactionAttribute : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionSpecTemTransactionAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde7c37fc, 0xe9b3, 0x48b4, 0xb7, 0xc6, 0xb9, 0x8c, 0x33, 0x36, 0x3c, 0xb7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionSpecTemTransactionAttribute link in the same Partition as the given TransactionSpec
		/// </summary>
		/// <param name="source">TransactionSpec to use as the source of the relationship.</param>
		/// <param name="target">TransactionAttribute to use as the target of the relationship.</param>
		public TransactionSpecTemTransactionAttribute(TransactionSpec source, TransactionAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId, source), new DslModeling::RoleAssignment(TransactionSpecTemTransactionAttribute.TransactionAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecTemTransactionAttribute(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecTemTransactionAttribute(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecTemTransactionAttribute(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecTemTransactionAttribute(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionSpec domain role code
		
		/// <summary>
		/// TransactionSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSpecDomainRoleId = new global::System.Guid(0xde79b977, 0x1251, 0x4f44, 0xa3, 0x9e, 0x38, 0xb6, 0x71, 0x33, 0x8d, 0x6a);
		
		/// <summary>
		/// DomainRole TransactionSpec
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("de79b977-1251-4f44-a39e-38b671338d6a")]
		public virtual TransactionSpec TransactionSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSpec of a TransactionAttribute
		/// <summary>
		/// Gets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionSpec GetTransactionSpec(TransactionAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionAttributeDomainRoleId) as TransactionSpec;
		}
		
		/// <summary>
		/// Sets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionSpec(TransactionAttribute element, TransactionSpec newTransactionSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionAttributeDomainRoleId, newTransactionSpec);
		}
		#endregion
		#region TransactionAttribute domain role code
		
		/// <summary>
		/// TransactionAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionAttributeDomainRoleId = new global::System.Guid(0x88abdc2e, 0x5ffa, 0x4c6d, 0x85, 0x34, 0x82, 0x71, 0xfb, 0x27, 0xf9, 0x46);
		
		/// <summary>
		/// DomainRole TransactionAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("88abdc2e-5ffa-4c6d-8534-8271fb27f946")]
		public virtual TransactionAttribute TransactionAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionAttribute of a TransactionSpec
		/// <summary>
		/// Gets a list of TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionAttribute> GetTransactionAttribute(TransactionSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionAttribute>, TransactionAttribute>(element, TransactionSpecDomainRoleId);
		}
		#endregion
		#region TransactionSpec link accessor
		/// <summary>
		/// Get the list of TransactionSpecTemTransactionAttribute links to a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> GetLinksToTransactionAttribute ( global::Empresa.MoneyManagerModel.TransactionSpec transactionSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>(transactionSpecInstance, global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId);
		}
		#endregion
		#region TransactionAttribute link accessor
		/// <summary>
		/// Get the TransactionSpecTemTransactionAttribute link to a TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute GetLinkToTransactionSpec (global::Empresa.MoneyManagerModel.TransactionAttribute transactionAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>(transactionAttributeInstance, global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionSpecTemTransactionAttribute instance accessors
		
		/// <summary>
		/// Get any TransactionSpecTemTransactionAttribute links between a given TransactionSpec and a TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> GetLinks( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.TransactionAttribute target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>(source, global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute link in links )
			{
				if ( target.Equals(link.TransactionAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionSpecTemTransactionAttribute link between a given TransactionSpecand a TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute GetLink( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.TransactionAttribute target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>(source, global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute link in links )
			{
				if ( target.Equals(link.TransactionAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AssociationReferênciasTransactionSpec
	/// Descrição de Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("796197ba-ed91-46a7-9401-9b955eb9e10c")]
	public partial class AssociationReferênciasTransactionSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssociationReferênciasTransactionSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x796197ba, 0xed91, 0x46a7, 0x94, 0x01, 0x9b, 0x95, 0x5e, 0xb9, 0xe1, 0x0c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssociationReferênciasTransactionSpec link in the same Partition as the given Association
		/// </summary>
		/// <param name="source">Association to use as the source of the relationship.</param>
		/// <param name="target">TransactionSpec to use as the target of the relationship.</param>
		public AssociationReferênciasTransactionSpec(Association source, TransactionSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssociationReferênciasTransactionSpec.AssociationDomainRoleId, source), new DslModeling::RoleAssignment(AssociationReferênciasTransactionSpec.TransactionSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationReferênciasTransactionSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationReferênciasTransactionSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationReferênciasTransactionSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationReferênciasTransactionSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0x7b6cef58, 0x1c87, 0x4041, 0xb8, 0x05, 0x66, 0x4f, 0x8d, 0xa2, 0xad, 0xa7);
		
		/// <summary>
		/// DomainRole Association
		/// Descrição de
		/// Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec.Association
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec/Association.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec/Association.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec/Association.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7b6cef58-1c87-4041-b805-664f8da2ada7")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Association of a TransactionSpec
		/// <summary>
		/// Gets a list of Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Association> GetAssociation(TransactionSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Association>, Association>(element, TransactionSpecDomainRoleId);
		}
		#endregion
		#region TransactionSpec domain role code
		
		/// <summary>
		/// TransactionSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSpecDomainRoleId = new global::System.Guid(0x4f3cdd71, 0x71c3, 0x4b55, 0xa0, 0x1b, 0xc6, 0x15, 0x66, 0xe3, 0xe6, 0xb1);
		
		/// <summary>
		/// DomainRole TransactionSpec
		/// Descrição de
		/// Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec.TransactionSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec/TransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec/TransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Association", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec/TransactionSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4f3cdd71-71c3-4b55-a01b-c61566e3e6b1")]
		public virtual TransactionSpec TransactionSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSpec of a Association
		/// <summary>
		/// Gets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionSpec GetTransactionSpec(Association element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationDomainRoleId) as TransactionSpec;
		}
		
		/// <summary>
		/// Sets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionSpec(Association element, TransactionSpec newTransactionSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationDomainRoleId, newTransactionSpec);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the AssociationReferênciasTransactionSpec link to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec GetLinkToTransactionSpec (global::Empresa.MoneyManagerModel.Association associationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec>(associationInstance, global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec.AssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Association not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionSpec link accessor
		/// <summary>
		/// Get the list of AssociationReferênciasTransactionSpec links to a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec> GetLinksToAssociation ( global::Empresa.MoneyManagerModel.TransactionSpec transactionSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec>(transactionSpecInstance, global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec.TransactionSpecDomainRoleId);
		}
		#endregion
		#region AssociationReferênciasTransactionSpec instance accessors
		
		/// <summary>
		/// Get any AssociationReferênciasTransactionSpec links between a given Association and a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec> GetLinks( global::Empresa.MoneyManagerModel.Association source, global::Empresa.MoneyManagerModel.TransactionSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec>(source, global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec.AssociationDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec link in links )
			{
				if ( target.Equals(link.TransactionSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssociationReferênciasTransactionSpec link between a given Associationand a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec GetLink( global::Empresa.MoneyManagerModel.Association source, global::Empresa.MoneyManagerModel.TransactionSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec>(source, global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec.AssociationDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AssociationReferênciasTransactionSpec link in links )
			{
				if ( target.Equals(link.TransactionSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship TransactionSpecReferênciasAssociations
	/// Descrição de Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4b64381b-243a-42db-8af3-238ffd74ad2c")]
	public partial class TransactionSpecReferênciasAssociations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionSpecReferênciasAssociations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4b64381b, 0x243a, 0x42db, 0x8a, 0xf3, 0x23, 0x8f, 0xfd, 0x74, 0xad, 0x2c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionSpecReferênciasAssociations link in the same Partition as the given TransactionSpec
		/// </summary>
		/// <param name="source">TransactionSpec to use as the source of the relationship.</param>
		/// <param name="target">Association to use as the target of the relationship.</param>
		public TransactionSpecReferênciasAssociations(TransactionSpec source, Association target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionSpecReferênciasAssociations.TransactionSpecDomainRoleId, source), new DslModeling::RoleAssignment(TransactionSpecReferênciasAssociations.AssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecReferênciasAssociations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecReferênciasAssociations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecReferênciasAssociations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecReferênciasAssociations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionSpec domain role code
		
		/// <summary>
		/// TransactionSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSpecDomainRoleId = new global::System.Guid(0x8ef12b82, 0xe0d5, 0x4061, 0x85, 0xb4, 0x74, 0x2b, 0xab, 0x02, 0x83, 0x03);
		
		/// <summary>
		/// DomainRole TransactionSpec
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations.TransactionSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations/TransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations/TransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Associations", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations/TransactionSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8ef12b82-e0d5-4061-85b4-742bab028303")]
		public virtual TransactionSpec TransactionSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSpecs of a Association
		/// <summary>
		/// Gets TransactionSpecs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionSpec GetTransactionSpecs(Association element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationDomainRoleId) as TransactionSpec;
		}
		
		/// <summary>
		/// Sets TransactionSpecs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionSpecs(Association element, TransactionSpec newTransactionSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationDomainRoleId, newTransactionSpec);
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0x24f96325, 0xa860, 0x4e3e, 0x91, 0x4b, 0x44, 0x71, 0x0d, 0x1b, 0xb0, 0xb5);
		
		/// <summary>
		/// DomainRole Association
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations.Association
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations/Association.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations/Association.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionSpecs", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations/Association.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("24f96325-a860-4e3e-914b-44710d1bb0b5")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Associations of a TransactionSpec
		/// <summary>
		/// Gets a list of Associations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Association> GetAssociations(TransactionSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Association>, Association>(element, TransactionSpecDomainRoleId);
		}
		#endregion
		#region TransactionSpec link accessor
		/// <summary>
		/// Get the list of TransactionSpecReferênciasAssociations links to a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations> GetLinksToAssociations ( global::Empresa.MoneyManagerModel.TransactionSpec transactionSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations>(transactionSpecInstance, global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations.TransactionSpecDomainRoleId);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the TransactionSpecReferênciasAssociations link to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations GetLinkToTransactionSpecs (global::Empresa.MoneyManagerModel.Association associationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations>(associationInstance, global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations.AssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Association not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionSpecReferênciasAssociations instance accessors
		
		/// <summary>
		/// Get any TransactionSpecReferênciasAssociations links between a given TransactionSpec and a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations> GetLinks( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.Association target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations>(source, global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations link in links )
			{
				if ( target.Equals(link.Association) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionSpecReferênciasAssociations link between a given TransactionSpecand a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations GetLink( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.Association target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations>(source, global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecReferênciasAssociations link in links )
			{
				if ( target.Equals(link.Association) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AssociationReferênciasAccountSpec
	/// Descrição de Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c635805d-a0f6-4fce-abe8-9f25345d4125")]
	public partial class AssociationReferênciasAccountSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssociationReferênciasAccountSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc635805d, 0xa0f6, 0x4fce, 0xab, 0xe8, 0x9f, 0x25, 0x34, 0x5d, 0x41, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssociationReferênciasAccountSpec link in the same Partition as the given Association
		/// </summary>
		/// <param name="source">Association to use as the source of the relationship.</param>
		/// <param name="target">AccountSpec to use as the target of the relationship.</param>
		public AssociationReferênciasAccountSpec(Association source, AccountSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssociationReferênciasAccountSpec.AssociationDomainRoleId, source), new DslModeling::RoleAssignment(AssociationReferênciasAccountSpec.AccountSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationReferênciasAccountSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationReferênciasAccountSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationReferênciasAccountSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationReferênciasAccountSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0x9d8aa203, 0xe622, 0x41ee, 0xb9, 0x28, 0x42, 0xbe, 0x3a, 0xee, 0xd9, 0xae);
		
		/// <summary>
		/// DomainRole Association
		/// Descrição de
		/// Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec.Association
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec/Association.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec/Association.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec/Association.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9d8aa203-e622-41ee-b928-42be3aeed9ae")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Association of a AccountSpec
		/// <summary>
		/// Gets a list of Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Association> GetAssociation(AccountSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Association>, Association>(element, AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0x5855cd2e, 0xdf52, 0x48a7, 0xa5, 0x98, 0x53, 0xb1, 0x24, 0x60, 0x1f, 0x12);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Descrição de
		/// Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Association", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec/AccountSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5855cd2e-df52-48a7-a598-53b124601f12")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpec of a Association
		/// <summary>
		/// Gets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountSpec GetAccountSpec(Association element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationDomainRoleId) as AccountSpec;
		}
		
		/// <summary>
		/// Sets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountSpec(Association element, AccountSpec newAccountSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationDomainRoleId, newAccountSpec);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the AssociationReferênciasAccountSpec link to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec GetLinkToAccountSpec (global::Empresa.MoneyManagerModel.Association associationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec>(associationInstance, global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec.AssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Association not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the list of AssociationReferênciasAccountSpec links to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec> GetLinksToAssociation ( global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec>(accountSpecInstance, global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec.AccountSpecDomainRoleId);
		}
		#endregion
		#region AssociationReferênciasAccountSpec instance accessors
		
		/// <summary>
		/// Get any AssociationReferênciasAccountSpec links between a given Association and a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec> GetLinks( global::Empresa.MoneyManagerModel.Association source, global::Empresa.MoneyManagerModel.AccountSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec>(source, global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec.AssociationDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec link in links )
			{
				if ( target.Equals(link.AccountSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssociationReferênciasAccountSpec link between a given Associationand a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec GetLink( global::Empresa.MoneyManagerModel.Association source, global::Empresa.MoneyManagerModel.AccountSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec>(source, global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec.AssociationDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AssociationReferênciasAccountSpec link in links )
			{
				if ( target.Equals(link.AccountSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AccountSpecReferênciasAssociations
	/// Descrição de Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cb63e87c-d795-466b-a30d-65991a60c78b")]
	public partial class AccountSpecReferênciasAssociations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AccountSpecReferênciasAssociations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcb63e87c, 0xd795, 0x466b, 0xa3, 0x0d, 0x65, 0x99, 0x1a, 0x60, 0xc7, 0x8b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AccountSpecReferênciasAssociations link in the same Partition as the given AccountSpec
		/// </summary>
		/// <param name="source">AccountSpec to use as the source of the relationship.</param>
		/// <param name="target">Association to use as the target of the relationship.</param>
		public AccountSpecReferênciasAssociations(AccountSpec source, Association target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AccountSpecReferênciasAssociations.AccountSpecDomainRoleId, source), new DslModeling::RoleAssignment(AccountSpecReferênciasAssociations.AssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecReferênciasAssociations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecReferênciasAssociations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecReferênciasAssociations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecReferênciasAssociations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0x89ac9ac6, 0xa03a, 0x4876, 0x85, 0x44, 0xdc, 0xfc, 0xe5, 0xcb, 0x53, 0x5a);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Associations", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations/AccountSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("89ac9ac6-a03a-4876-8544-dcfce5cb535a")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpecs of a Association
		/// <summary>
		/// Gets AccountSpecs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountSpec GetAccountSpecs(Association element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationDomainRoleId) as AccountSpec;
		}
		
		/// <summary>
		/// Sets AccountSpecs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountSpecs(Association element, AccountSpec newAccountSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationDomainRoleId, newAccountSpec);
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0xc47bc27e, 0x8d69, 0x43a7, 0xb4, 0xae, 0x43, 0xa2, 0xe1, 0x62, 0x7e, 0xa9);
		
		/// <summary>
		/// DomainRole Association
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations.Association
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations/Association.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations/Association.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AccountSpecs", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations/Association.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c47bc27e-8d69-43a7-b4ae-43a2e1627ea9")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Associations of a AccountSpec
		/// <summary>
		/// Gets a list of Associations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Association> GetAssociations(AccountSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Association>, Association>(element, AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the list of AccountSpecReferênciasAssociations links to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations> GetLinksToAssociations ( global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations>(accountSpecInstance, global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations.AccountSpecDomainRoleId);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the AccountSpecReferênciasAssociations link to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations GetLinkToAccountSpecs (global::Empresa.MoneyManagerModel.Association associationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations>(associationInstance, global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations.AssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Association not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountSpecReferênciasAssociations instance accessors
		
		/// <summary>
		/// Get any AccountSpecReferênciasAssociations links between a given AccountSpec and a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations> GetLinks( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.Association target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations>(source, global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations link in links )
			{
				if ( target.Equals(link.Association) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AccountSpecReferênciasAssociations link between a given AccountSpecand a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations GetLink( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.Association target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations>(source, global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecReferênciasAssociations link in links )
			{
				if ( target.Equals(link.Association) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AssociationReferênciasUserSpec
	/// Descrição de Empresa.MoneyManagerModel.AssociationReferênciasUserSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasUserSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasUserSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("10d611a1-a88d-41c4-8b60-6d1546764963")]
	public partial class AssociationReferênciasUserSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssociationReferênciasUserSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x10d611a1, 0xa88d, 0x41c4, 0x8b, 0x60, 0x6d, 0x15, 0x46, 0x76, 0x49, 0x63);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssociationReferênciasUserSpec link in the same Partition as the given Association
		/// </summary>
		/// <param name="source">Association to use as the source of the relationship.</param>
		/// <param name="target">UserSpec to use as the target of the relationship.</param>
		public AssociationReferênciasUserSpec(Association source, UserSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssociationReferênciasUserSpec.AssociationDomainRoleId, source), new DslModeling::RoleAssignment(AssociationReferênciasUserSpec.UserSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationReferênciasUserSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationReferênciasUserSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationReferênciasUserSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationReferênciasUserSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0x38e4ae2c, 0x8288, 0x4143, 0x99, 0xe3, 0xc5, 0x9b, 0x2f, 0x10, 0xb5, 0xc9);
		
		/// <summary>
		/// DomainRole Association
		/// Descrição de
		/// Empresa.MoneyManagerModel.AssociationReferênciasUserSpec.Association
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasUserSpec/Association.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasUserSpec/Association.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UserSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AssociationReferênciasUserSpec/Association.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("38e4ae2c-8288-4143-99e3-c59b2f10b5c9")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Association of a UserSpec
		/// <summary>
		/// Gets a list of Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Association> GetAssociation(UserSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Association>, Association>(element, UserSpecDomainRoleId);
		}
		#endregion
		#region UserSpec domain role code
		
		/// <summary>
		/// UserSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserSpecDomainRoleId = new global::System.Guid(0x2267e780, 0x2caf, 0x4b42, 0x98, 0xca, 0x5b, 0xd1, 0x60, 0x89, 0x62, 0xc2);
		
		/// <summary>
		/// DomainRole UserSpec
		/// Descrição de Empresa.MoneyManagerModel.AssociationReferênciasUserSpec.UserSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AssociationReferênciasUserSpec/UserSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AssociationReferênciasUserSpec/UserSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Association", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AssociationReferênciasUserSpec/UserSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2267e780-2caf-4b42-98ca-5bd1608962c2")]
		public virtual UserSpec UserSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserSpec of a Association
		/// <summary>
		/// Gets UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UserSpec GetUserSpec(Association element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationDomainRoleId) as UserSpec;
		}
		
		/// <summary>
		/// Sets UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUserSpec(Association element, UserSpec newUserSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationDomainRoleId, newUserSpec);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the AssociationReferênciasUserSpec link to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec GetLinkToUserSpec (global::Empresa.MoneyManagerModel.Association associationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec>(associationInstance, global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec.AssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Association not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UserSpec link accessor
		/// <summary>
		/// Get the list of AssociationReferênciasUserSpec links to a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec> GetLinksToAssociation ( global::Empresa.MoneyManagerModel.UserSpec userSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec>(userSpecInstance, global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec.UserSpecDomainRoleId);
		}
		#endregion
		#region AssociationReferênciasUserSpec instance accessors
		
		/// <summary>
		/// Get any AssociationReferênciasUserSpec links between a given Association and a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec> GetLinks( global::Empresa.MoneyManagerModel.Association source, global::Empresa.MoneyManagerModel.UserSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec>(source, global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec.AssociationDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec link in links )
			{
				if ( target.Equals(link.UserSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssociationReferênciasUserSpec link between a given Associationand a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec GetLink( global::Empresa.MoneyManagerModel.Association source, global::Empresa.MoneyManagerModel.UserSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec>(source, global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec.AssociationDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AssociationReferênciasUserSpec link in links )
			{
				if ( target.Equals(link.UserSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship UserSpecReferênciasAssociations
	/// Descrição de Empresa.MoneyManagerModel.UserSpecReferênciasAssociations
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecReferênciasAssociations.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecReferênciasAssociations.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("995cf682-20b4-4924-bf7d-ccc0edcc0f9b")]
	public partial class UserSpecReferênciasAssociations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserSpecReferênciasAssociations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x995cf682, 0x20b4, 0x4924, 0xbf, 0x7d, 0xcc, 0xc0, 0xed, 0xcc, 0x0f, 0x9b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserSpecReferênciasAssociations link in the same Partition as the given UserSpec
		/// </summary>
		/// <param name="source">UserSpec to use as the source of the relationship.</param>
		/// <param name="target">Association to use as the target of the relationship.</param>
		public UserSpecReferênciasAssociations(UserSpec source, Association target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserSpecReferênciasAssociations.UserSpecDomainRoleId, source), new DslModeling::RoleAssignment(UserSpecReferênciasAssociations.AssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserSpecReferênciasAssociations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserSpecReferênciasAssociations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserSpecReferênciasAssociations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserSpecReferênciasAssociations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UserSpec domain role code
		
		/// <summary>
		/// UserSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserSpecDomainRoleId = new global::System.Guid(0x8d6483b3, 0x728e, 0x470a, 0x8d, 0x17, 0x6f, 0x28, 0x8f, 0x40, 0x56, 0x5e);
		
		/// <summary>
		/// DomainRole UserSpec
		/// Descrição de Empresa.MoneyManagerModel.UserSpecReferênciasAssociations.UserSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecReferênciasAssociations/UserSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecReferênciasAssociations/UserSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Associations", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserSpecReferênciasAssociations/UserSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8d6483b3-728e-470a-8d17-6f288f40565e")]
		public virtual UserSpec UserSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserSpecs of a Association
		/// <summary>
		/// Gets UserSpecs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UserSpec GetUserSpecs(Association element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationDomainRoleId) as UserSpec;
		}
		
		/// <summary>
		/// Sets UserSpecs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUserSpecs(Association element, UserSpec newUserSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationDomainRoleId, newUserSpec);
		}
		#endregion
		#region Association domain role code
		
		/// <summary>
		/// Association domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainRoleId = new global::System.Guid(0x787e33e0, 0xa216, 0x4cff, 0x95, 0x6f, 0x11, 0xd2, 0xa7, 0xec, 0x32, 0xb5);
		
		/// <summary>
		/// DomainRole Association
		/// Descrição de
		/// Empresa.MoneyManagerModel.UserSpecReferênciasAssociations.Association
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecReferênciasAssociations/Association.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecReferênciasAssociations/Association.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UserSpecs", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserSpecReferênciasAssociations/Association.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("787e33e0-a216-4cff-956f-11d2a7ec32b5")]
		public virtual Association Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Association)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Associations of a UserSpec
		/// <summary>
		/// Gets a list of Associations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Association> GetAssociations(UserSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Association>, Association>(element, UserSpecDomainRoleId);
		}
		#endregion
		#region UserSpec link accessor
		/// <summary>
		/// Get the list of UserSpecReferênciasAssociations links to a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations> GetLinksToAssociations ( global::Empresa.MoneyManagerModel.UserSpec userSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations>(userSpecInstance, global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations.UserSpecDomainRoleId);
		}
		#endregion
		#region Association link accessor
		/// <summary>
		/// Get the UserSpecReferênciasAssociations link to a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations GetLinkToUserSpecs (global::Empresa.MoneyManagerModel.Association associationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations>(associationInstance, global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations.AssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Association not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UserSpecReferênciasAssociations instance accessors
		
		/// <summary>
		/// Get any UserSpecReferênciasAssociations links between a given UserSpec and a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations> GetLinks( global::Empresa.MoneyManagerModel.UserSpec source, global::Empresa.MoneyManagerModel.Association target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations>(source, global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations.UserSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations link in links )
			{
				if ( target.Equals(link.Association) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserSpecReferênciasAssociations link between a given UserSpecand a Association.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations GetLink( global::Empresa.MoneyManagerModel.UserSpec source, global::Empresa.MoneyManagerModel.Association target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations>(source, global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations.UserSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserSpecReferênciasAssociations link in links )
			{
				if ( target.Equals(link.Association) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship UserAttributeReferênciasAttributeTypes
	/// Descrição de Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cdd42d84-be23-4047-b9c2-2eb011f3b634")]
	public partial class UserAttributeReferênciasAttributeTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserAttributeReferênciasAttributeTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcdd42d84, 0xbe23, 0x4047, 0xb9, 0xc2, 0x2e, 0xb0, 0x11, 0xf3, 0xb6, 0x34);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserAttributeReferênciasAttributeTypes link in the same Partition as the given UserAttribute
		/// </summary>
		/// <param name="source">UserAttribute to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public UserAttributeReferênciasAttributeTypes(UserAttribute source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId, source), new DslModeling::RoleAssignment(UserAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserAttributeReferênciasAttributeTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserAttributeReferênciasAttributeTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserAttributeReferênciasAttributeTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserAttributeReferênciasAttributeTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UserAttribute domain role code
		
		/// <summary>
		/// UserAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserAttributeDomainRoleId = new global::System.Guid(0x8665a90f, 0x61da, 0x4778, 0x80, 0x5d, 0xf3, 0x79, 0x8f, 0xdd, 0x11, 0xb2);
		
		/// <summary>
		/// DomainRole UserAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.UserAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/UserAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/UserAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeTypes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/UserAttribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8665a90f-61da-4778-805d-f3798fdd11b2")]
		public virtual UserAttribute UserAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserAttributes of a AttributeType
		/// <summary>
		/// Gets UserAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UserAttribute GetUserAttributes(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypeDomainRoleId) as UserAttribute;
		}
		
		/// <summary>
		/// Sets UserAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUserAttributes(AttributeType element, UserAttribute newUserAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypeDomainRoleId, newUserAttribute);
		}
		#endregion
		#region AttributeType domain role code
		
		/// <summary>
		/// AttributeType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypeDomainRoleId = new global::System.Guid(0x9b987e29, 0x7a81, 0x4f14, 0x9b, 0xc5, 0xe6, 0x5b, 0x23, 0x85, 0x68, 0xf5);
		
		/// <summary>
		/// DomainRole AttributeType
		/// Descrição de
		/// Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.AttributeType
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/AttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/AttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UserAttributes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/AttributeType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9b987e29-7a81-4f14-9bc5-e65b238568f5")]
		public virtual AttributeType AttributeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeTypes of a UserAttribute
		/// <summary>
		/// Gets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributeType GetAttributeTypes(UserAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserAttributeDomainRoleId) as AttributeType;
		}
		
		/// <summary>
		/// Sets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttributeTypes(UserAttribute element, AttributeType newAttributeType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserAttributeDomainRoleId, newAttributeType);
		}
		#endregion
		#region UserAttribute link accessor
		/// <summary>
		/// Get the UserAttributeReferênciasAttributeTypes link to a UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes GetLinkToAttributeTypes (global::Empresa.MoneyManagerModel.UserAttribute userAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>(userAttributeInstance, global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UserAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeType link accessor
		/// <summary>
		/// Get the UserAttributeReferênciasAttributeTypes link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes GetLinkToUserAttributes (global::Empresa.MoneyManagerModel.AttributeType attributeTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>(attributeTypeInstance, global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UserAttributeReferênciasAttributeTypes instance accessors
		
		/// <summary>
		/// Get any UserAttributeReferênciasAttributeTypes links between a given UserAttribute and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> GetLinks( global::Empresa.MoneyManagerModel.UserAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserAttributeReferênciasAttributeTypes link between a given UserAttributeand a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes GetLink( global::Empresa.MoneyManagerModel.UserAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AccountAttributeReferênciasAttributeTypes
	/// Descrição de Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("388d4ea2-566a-4389-aa00-43e61dfa4229")]
	public partial class AccountAttributeReferênciasAttributeTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AccountAttributeReferênciasAttributeTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x388d4ea2, 0x566a, 0x4389, 0xaa, 0x00, 0x43, 0xe6, 0x1d, 0xfa, 0x42, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AccountAttributeReferênciasAttributeTypes link in the same Partition as the given AccountAttribute
		/// </summary>
		/// <param name="source">AccountAttribute to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public AccountAttributeReferênciasAttributeTypes(AccountAttribute source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId, source), new DslModeling::RoleAssignment(AccountAttributeReferênciasAttributeTypes.AttributeTypesDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountAttributeReferênciasAttributeTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountAttributeReferênciasAttributeTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountAttributeReferênciasAttributeTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountAttributeReferênciasAttributeTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AccountAttribute domain role code
		
		/// <summary>
		/// AccountAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountAttributeDomainRoleId = new global::System.Guid(0xfa0faf94, 0x0a08, 0x4d1b, 0xb3, 0x57, 0x4a, 0x4b, 0x45, 0x6d, 0x38, 0x7f);
		
		/// <summary>
		/// DomainRole AccountAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AccountAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AccountAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AccountAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeTypes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AccountAttribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fa0faf94-0a08-4d1b-b357-4a4b456d387f")]
		public virtual AccountAttribute AccountAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountAttribute of a AttributeType
		/// <summary>
		/// Gets AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountAttribute GetAccountAttribute(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypesDomainRoleId) as AccountAttribute;
		}
		
		/// <summary>
		/// Sets AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountAttribute(AttributeType element, AccountAttribute newAccountAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypesDomainRoleId, newAccountAttribute);
		}
		#endregion
		#region AttributeTypes domain role code
		
		/// <summary>
		/// AttributeTypes domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypesDomainRoleId = new global::System.Guid(0xb70659ff, 0xebe2, 0x41dc, 0xaf, 0x83, 0x9c, 0x4c, 0xed, 0xc9, 0x3b, 0xf9);
		
		/// <summary>
		/// DomainRole AttributeTypes
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AttributeTypes
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AttributeTypes.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AttributeTypes.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AccountAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AttributeTypes.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b70659ff-ebe2-41dc-af83-9c4cedc93bf9")]
		public virtual AttributeType AttributeTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeTypes of a AccountAttribute
		/// <summary>
		/// Gets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributeType GetAttributeTypes(AccountAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountAttributeDomainRoleId) as AttributeType;
		}
		
		/// <summary>
		/// Sets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttributeTypes(AccountAttribute element, AttributeType newAttributeTypes)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountAttributeDomainRoleId, newAttributeTypes);
		}
		#endregion
		#region AccountAttribute link accessor
		/// <summary>
		/// Get the AccountAttributeReferênciasAttributeTypes link to a AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes GetLinkToAttributeTypes (global::Empresa.MoneyManagerModel.AccountAttribute accountAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>(accountAttributeInstance, global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeTypes link accessor
		/// <summary>
		/// Get the AccountAttributeReferênciasAttributeTypes link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes GetLinkToAccountAttribute (global::Empresa.MoneyManagerModel.AttributeType attributeTypesInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>(attributeTypesInstance, global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AttributeTypesDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeTypes not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountAttributeReferênciasAttributeTypes instance accessors
		
		/// <summary>
		/// Get any AccountAttributeReferênciasAttributeTypes links between a given AccountAttribute and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> GetLinks( global::Empresa.MoneyManagerModel.AccountAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeTypes) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AccountAttributeReferênciasAttributeTypes link between a given AccountAttributeand a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes GetLink( global::Empresa.MoneyManagerModel.AccountAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeTypes) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship TransactionAttributeReferênciasAttributeTypes
	/// Descrição de
	/// Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7beab260-bab2-4258-8d18-d00fa4f13723")]
	public partial class TransactionAttributeReferênciasAttributeTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionAttributeReferênciasAttributeTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7beab260, 0xbab2, 0x4258, 0x8d, 0x18, 0xd0, 0x0f, 0xa4, 0xf1, 0x37, 0x23);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionAttributeReferênciasAttributeTypes link in the same Partition as the given TransactionAttribute
		/// </summary>
		/// <param name="source">TransactionAttribute to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public TransactionAttributeReferênciasAttributeTypes(TransactionAttribute source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId, source), new DslModeling::RoleAssignment(TransactionAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionAttributeReferênciasAttributeTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionAttributeReferênciasAttributeTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionAttributeReferênciasAttributeTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionAttributeReferênciasAttributeTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionAttribute domain role code
		
		/// <summary>
		/// TransactionAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionAttributeDomainRoleId = new global::System.Guid(0xe9040c72, 0xbee9, 0x4d58, 0xbd, 0xa8, 0x5e, 0xb1, 0xdc, 0x83, 0x27, 0x04);
		
		/// <summary>
		/// DomainRole TransactionAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.TransactionAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/TransactionAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/TransactionAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeTypes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/TransactionAttribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e9040c72-bee9-4d58-bda8-5eb1dc832704")]
		public virtual TransactionAttribute TransactionAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionAttributes of a AttributeType
		/// <summary>
		/// Gets TransactionAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionAttribute GetTransactionAttributes(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypeDomainRoleId) as TransactionAttribute;
		}
		
		/// <summary>
		/// Sets TransactionAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionAttributes(AttributeType element, TransactionAttribute newTransactionAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypeDomainRoleId, newTransactionAttribute);
		}
		#endregion
		#region AttributeType domain role code
		
		/// <summary>
		/// AttributeType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypeDomainRoleId = new global::System.Guid(0x6f336c0a, 0xc0b7, 0x46f5, 0xaf, 0x5f, 0x3a, 0x46, 0xe2, 0xf3, 0xb3, 0x4e);
		
		/// <summary>
		/// DomainRole AttributeType
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.AttributeType
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/AttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/AttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionAttributes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/AttributeType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6f336c0a-c0b7-46f5-af5f-3a46e2f3b34e")]
		public virtual AttributeType AttributeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeTypes of a TransactionAttribute
		/// <summary>
		/// Gets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributeType GetAttributeTypes(TransactionAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionAttributeDomainRoleId) as AttributeType;
		}
		
		/// <summary>
		/// Sets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttributeTypes(TransactionAttribute element, AttributeType newAttributeType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionAttributeDomainRoleId, newAttributeType);
		}
		#endregion
		#region TransactionAttribute link accessor
		/// <summary>
		/// Get the TransactionAttributeReferênciasAttributeTypes link to a TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes GetLinkToAttributeTypes (global::Empresa.MoneyManagerModel.TransactionAttribute transactionAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>(transactionAttributeInstance, global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeType link accessor
		/// <summary>
		/// Get the TransactionAttributeReferênciasAttributeTypes link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes GetLinkToTransactionAttributes (global::Empresa.MoneyManagerModel.AttributeType attributeTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>(attributeTypeInstance, global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionAttributeReferênciasAttributeTypes instance accessors
		
		/// <summary>
		/// Get any TransactionAttributeReferênciasAttributeTypes links between a given TransactionAttribute and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> GetLinks( global::Empresa.MoneyManagerModel.TransactionAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionAttributeReferênciasAttributeTypes link between a given TransactionAttributeand a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes GetLink( global::Empresa.MoneyManagerModel.TransactionAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
