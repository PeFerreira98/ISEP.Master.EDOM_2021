package moneyManager.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AccountAttribute;
  private ConceptPresentation props_AccountSpec;
  private ConceptPresentation props_Association;
  private ConceptPresentation props_AssociationReference;
  private ConceptPresentation props_Model;
  private ConceptPresentation props_TransactionAttribute;
  private ConceptPresentation props_TransactionSpec;
  private ConceptPresentation props_UserAttribute;
  private ConceptPresentation props_UserSpec;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AccountAttribute:
        if (props_AccountAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AccountAttribute = cpb.create();
        }
        return props_AccountAttribute;
      case LanguageConceptSwitch.AccountSpec:
        if (props_AccountSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AccountSpec = cpb.create();
        }
        return props_AccountSpec;
      case LanguageConceptSwitch.Association:
        if (props_Association == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Association = cpb.create();
        }
        return props_Association;
      case LanguageConceptSwitch.AssociationReference:
        if (props_AssociationReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd7871e952L, 0x781619bd7871e953L, "association", "", "");
          props_AssociationReference = cpb.create();
        }
        return props_AssociationReference;
      case LanguageConceptSwitch.Model:
        if (props_Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Model = cpb.create();
        }
        return props_Model;
      case LanguageConceptSwitch.TransactionAttribute:
        if (props_TransactionAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransactionAttribute = cpb.create();
        }
        return props_TransactionAttribute;
      case LanguageConceptSwitch.TransactionSpec:
        if (props_TransactionSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TransactionSpec = cpb.create();
        }
        return props_TransactionSpec;
      case LanguageConceptSwitch.UserAttribute:
        if (props_UserAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UserAttribute = cpb.create();
        }
        return props_UserAttribute;
      case LanguageConceptSwitch.UserSpec:
        if (props_UserSpec == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UserSpec = cpb.create();
        }
        return props_UserSpec;
    }
    return null;
  }
}
