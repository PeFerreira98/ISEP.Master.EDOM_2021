package moneyManager.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import java.io.FileWriter;
import java.io.PrintWriter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class Model__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713101L, "moneyManager.structure.Model");

  public static final SMethod<Void> generatePlantUML_id7wm6rPSy8TP = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("generatePlantUML").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("7wm6rPSy8TP").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(generatePlantUML_id7wm6rPSy8TP);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void generatePlantUML_id7wm6rPSy8TP(@NotNull SNode __thisNode__) {
    try {

      //  Directory to save the .PUML file
      String homeDir = System.getProperty("user.home");

      // Creating new FileWriter with the name of the desired file
      FileWriter writerDirectory = new FileWriter(homeDir + "/diagram.puml");
      PrintWriter writer = new PrintWriter(writerDirectory);

      // Start of the file
      writer.println("@startuml");

      // MODEL
      writer.println("Class " + SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL) + "{");
      writer.println("}");

      //  USERSPEC
      SNode user = SLinkOperations.getTarget(__thisNode__, LINKS.UserSpecs$14RE);
      writer.println("Class " + SPropertyOperations.getString(user, PROPS.name$MnvL) + "{");
      for (SNode attrtibute : ListSequence.fromList(SLinkOperations.getChildren(user, LINKS.UserAttributes$oE3R))) {
        writer.println(SPropertyOperations.getEnum(attrtibute, PROPS.type$oU3m) + " " + SPropertyOperations.getString(attrtibute, PROPS.name$MnvL));
      }
      writer.println("}");

      //  ACCOUNTSPEC
      SNode account = SLinkOperations.getTarget(__thisNode__, LINKS.AccountSpecs$1pZ4);
      writer.println("Class " + SPropertyOperations.getString(account, PROPS.name$MnvL) + " #95e500 {");
      for (SNode attribute : ListSequence.fromList(SLinkOperations.getChildren(account, LINKS.AccountAttributes$oYIG))) {
        writer.println(SPropertyOperations.getEnum(attribute, PROPS.type$oZVH) + " " + SPropertyOperations.getString(attribute, PROPS.name$MnvL));
      }
      writer.println("}");

      //  TRANSACTIONSPEC
      SNode transaction = SLinkOperations.getTarget(__thisNode__, LINKS.TransactionSpecs$1yED);
      writer.println("Class " + SPropertyOperations.getString(transaction, PROPS.name$MnvL) + " #00e5e5 {");
      for (SNode attribute : ListSequence.fromList(SLinkOperations.getChildren(transaction, LINKS.TransactionAttributes$oTll))) {
        writer.println(SPropertyOperations.getEnum(attribute, PROPS.type$p0nk) + " " + SPropertyOperations.getString(attribute, PROPS.name$MnvL));
      }
      writer.println("}");

      // ASSOCIATION
      for (SNode association : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.Associations$1yTE))) {
        writer.println("Class " + SPropertyOperations.getString(association, PROPS.name$MnvL) + " #C0C0C0 {");
        writer.println("}");
      }

      // CONNECTIONS BETWEEN CLASSES

      // MODEL
      // Connects with UserSpec
      writer.println(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL) + " *-- " + user);

      // Connects with AccountSpec
      writer.println(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL) + " *-- " + account);

      // Connects with TransactionSpec
      writer.println(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL) + " *-- " + transaction);

      // Connects with Association, however, association is a list.
      // That's why it is used a foreach
      for (SNode association : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.Associations$1yTE))) {
        writer.println(SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL) + " *-- " + association);
      }

      // USERSPEC
      for (SNode associationRef : ListSequence.fromList(SLinkOperations.getChildren(user, LINKS.AssociationReferences$oRrK))) {
        writer.println(SPropertyOperations.getString(user, PROPS.name$MnvL) + " -- " + SPropertyOperations.getString(SLinkOperations.getTarget(associationRef, LINKS.association$_UNK), PROPS.name$MnvL));
      }

      // ACCOUNTSPEC
      for (SNode associationRef : ListSequence.fromList(SLinkOperations.getChildren(account, LINKS.AssociationReferences$oYXH))) {
        writer.println(SPropertyOperations.getString(account, PROPS.name$MnvL) + " -- " + SPropertyOperations.getString(SLinkOperations.getTarget(associationRef, LINKS.association$_UNK), PROPS.name$MnvL));
      }

      // TRANSACTIONSPEC
      for (SNode associationRef : ListSequence.fromList(SLinkOperations.getChildren(transaction, LINKS.AssociationReferences$oT$m))) {
        writer.println(SPropertyOperations.getString(transaction, PROPS.name$MnvL) + " -- " + SPropertyOperations.getString(SLinkOperations.getTarget(associationRef, LINKS.association$_UNK), PROPS.name$MnvL));
      }

      // End of the file
      writer.println("@enduml");

      // Close writer
      writer.close();
    } catch (Exception ex) {
    }
  }

  /*package*/ Model__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        generatePlantUML_id7wm6rPSy8TP(node);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty type$oU3m = MetaAdapterFactory.getProperty(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713125L, 0x781619bd7871e961L, "type");
    /*package*/ static final SProperty type$oZVH = MetaAdapterFactory.getProperty(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713127L, 0x781619bd7871e965L, "type");
    /*package*/ static final SProperty type$p0nk = MetaAdapterFactory.getProperty(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd7871312cL, 0x781619bd7871e966L, "type");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink UserSpecs$14RE = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713101L, 0x781619bd78713107L, "UserSpecs");
    /*package*/ static final SContainmentLink UserAttributes$oE3R = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713102L, 0x781619bd7871e94aL, "UserAttributes");
    /*package*/ static final SContainmentLink AccountSpecs$1pZ4 = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713101L, 0x781619bd78713122L, "AccountSpecs");
    /*package*/ static final SContainmentLink AccountAttributes$oYIG = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713105L, 0x781619bd7871e963L, "AccountAttributes");
    /*package*/ static final SContainmentLink TransactionSpecs$1yED = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713101L, 0x781619bd78713132L, "TransactionSpecs");
    /*package*/ static final SContainmentLink TransactionAttributes$oTll = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713123L, 0x781619bd7871e95eL, "TransactionAttributes");
    /*package*/ static final SContainmentLink Associations$1yTE = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713101L, 0x781619bd78713133L, "Associations");
    /*package*/ static final SReferenceLink association$_UNK = MetaAdapterFactory.getReferenceLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd7871e952L, 0x781619bd7871e953L, "association");
    /*package*/ static final SContainmentLink AssociationReferences$oRrK = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713102L, 0x781619bd7871e959L, "AssociationReferences");
    /*package*/ static final SContainmentLink AssociationReferences$oYXH = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713105L, 0x781619bd7871e964L, "AssociationReferences");
    /*package*/ static final SContainmentLink AssociationReferences$oT$m = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713123L, 0x781619bd7871e95fL, "AssociationReferences");
  }
}
