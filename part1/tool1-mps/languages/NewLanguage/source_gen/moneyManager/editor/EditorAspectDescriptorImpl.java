package moneyManager.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AccountAttribute_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AccountGroupSpec_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AccountSpec_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AccountSpecReference_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new AccountTransactionAssociation_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new AccountTransactionAssociationReference_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new CategoryAttribute_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new CategorySpec_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Model_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new TransactionAttribute_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new TransactionCategoryAssociation_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new TransactionCategoryAssociationReference_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new TransactionSpec_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new UserAccountAssociation_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new UserAccountAssociationReference_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new UserAttribute_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new UserSpec_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AccountSpecReference_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new AccountTransactionAssociationReference_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new TransactionCategoryAssociationReference_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new UserAccountAssociationReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713127L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e915L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713105L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e95fL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e949L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e94cL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22c20b44cL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22c20b449L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713101L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd7871312cL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22c220907L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22c22090fL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713123L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e91dL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e93aL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713125L), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713102L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e95fL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e94cL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22c22090fL), MetaIdFactory.conceptId(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x53f441f22bf9e93aL)).seal();
}
