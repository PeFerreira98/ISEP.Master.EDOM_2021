package moneyManager.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_AccountSpec_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_AccountSpec_NonTypesystemRule() {
  }
  public void applyRule(final SNode accountSpec, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode accountSibling : ListSequence.fromList(SNodeOperations.getAllSiblings(accountSpec, false))) {
      SNode sibling = ((SNode) accountSibling);

      if (SPropertyOperations.getString(sibling, PROPS.name$MnvL).equals(SPropertyOperations.getString(accountSpec, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(accountSpec, "There is already a " + SNodeOperations.getConcept(accountSpec).getName() + " with this name: " + SPropertyOperations.getString(sibling, PROPS.name$MnvL), "r:2a14342b-a65f-4017-82a3-0a33a55ab1c8(moneyManager.typesystem)", "8653132035599810111", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("moneyManager.typesystem.DeleteUniqueAccountSpec_QuickFix", "8653132035600369584", false);
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      }
    }

    // Check if starts with capital letters
    if (SPropertyOperations.getString(accountSpec, PROPS.name$MnvL) != null && Character.isLowerCase(SPropertyOperations.getString(accountSpec, PROPS.name$MnvL).charAt(0))) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(accountSpec, "Name must begin with capital letter", "r:2a14342b-a65f-4017-82a3-0a33a55ab1c8(moneyManager.typesystem)", "8653132035599844261", null, errorTarget);
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("moneyManager.typesystem.CapitalizeAccountSpecName_QuickFix", "8653132035600370014", false);
          intentionProvider.putArgument("account", accountSpec);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }

    // Check if is null or empty
    if (SPropertyOperations.getString(accountSpec, PROPS.name$MnvL) == null || SPropertyOperations.getString(accountSpec, PROPS.name$MnvL) == " ") {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(accountSpec, "Name should not be null or empty", "r:2a14342b-a65f-4017-82a3-0a33a55ab1c8(moneyManager.typesystem)", "8653132035599858552", null, errorTarget);
      }
    }

    boolean currencyCheck = false;
    for (SNode attribute : ListSequence.fromList(SLinkOperations.getChildren(accountSpec, LINKS.AccountAttributes$oYIG))) {
      if (SPropertyOperations.getString(attribute, PROPS.name$MnvL).equals(currencyCheck)) {
        currencyCheck = true;
        continue;
      }
    }

    if (currencyCheck) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(accountSpec, "No currency found", "r:2a14342b-a65f-4017-82a3-0a33a55ab1c8(moneyManager.typesystem)", "8653132035600333149", null, errorTarget);
      }
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.AccountSpec$qm;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink AccountAttributes$oYIG = MetaAdapterFactory.getContainmentLink(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713105L, 0x781619bd7871e963L, "AccountAttributes");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept AccountSpec$qm = MetaAdapterFactory.getConcept(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713105L, "moneyManager.structure.AccountSpec");
  }
}
