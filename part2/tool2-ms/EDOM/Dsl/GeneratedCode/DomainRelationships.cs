//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ExampleModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ExampleModelHasElements.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ExampleModelHasElements.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("447014ae-8469-42ba-8145-6b6abea1c041")]
	public partial class ExampleModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x447014ae, 0x8469, 0x42ba, 0x81, 0x45, 0x6b, 0x6a, 0xbe, 0xa1, 0xc0, 0x41);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasElements link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">UserSpec to use as the target of the relationship.</param>
		public ExampleModelHasElements(Model source, UserSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasElements.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x7ead59ab, 0xd401, 0x4d57, 0xb7, 0xe3, 0x54, 0xe8, 0x2f, 0xbb, 0x61, 0x81);
		
		/// <summary>
		/// DomainRole Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ExampleModelHasElements/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ExampleModelHasElements/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ExampleModelHasElements/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7ead59ab-d401-4d57-b7e3-54e82fbb6181")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a UserSpec
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(UserSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(UserSpec element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xc5c00764, 0xadf3, 0x4fd9, 0x96, 0x41, 0x80, 0xa2, 0x36, 0xbc, 0x52, 0xb7);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ExampleModelHasElements/Element.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ExampleModelHasElements/Element.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ExampleModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c5c00764-adf3-4fd9-9641-80a236bc52b7")]
		public virtual UserSpec Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a Model
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UserSpec> GetElements(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UserSpec>, UserSpec>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ExampleModelHasElements links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ExampleModelHasElements> GetLinksToElements ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ExampleModelHasElements>(modelInstance, global::Empresa.MoneyManagerModel.ExampleModelHasElements.ModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ExampleModelHasElements link to a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ExampleModelHasElements GetLinkToModel (global::Empresa.MoneyManagerModel.UserSpec elementInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ExampleModelHasElements>(elementInstance, global::Empresa.MoneyManagerModel.ExampleModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasElements instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasElements links between a given Model and a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ExampleModelHasElements> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.UserSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ExampleModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ExampleModelHasElements>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ExampleModelHasElements>(source, global::Empresa.MoneyManagerModel.ExampleModelHasElements.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasElements link between a given Modeland a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ExampleModelHasElements GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.UserSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ExampleModelHasElements>(source, global::Empresa.MoneyManagerModel.ExampleModelHasElements.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelTemAccountSpec
	/// Descrição de Empresa.MoneyManagerModel.ModelTemAccountSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b97655a9-fbb2-4916-b1b3-6adace669cb6")]
	public partial class ModelTemAccountSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelTemAccountSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb97655a9, 0xfbb2, 0x4916, 0xb1, 0xb3, 0x6a, 0xda, 0xce, 0x66, 0x9c, 0xb6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelTemAccountSpec link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">AccountSpec to use as the target of the relationship.</param>
		public ModelTemAccountSpec(Model source, AccountSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelTemAccountSpec.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelTemAccountSpec.AccountSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemAccountSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemAccountSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelTemAccountSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelTemAccountSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xbd509ce8, 0x516a, 0x436a, 0xa9, 0xc2, 0x8b, 0x7d, 0x9b, 0xd6, 0x61, 0x48);
		
		/// <summary>
		/// DomainRole Model
		/// Descrição de Empresa.MoneyManagerModel.ModelTemAccountSpec.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAccountSpec/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAccountSpec/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelTemAccountSpec/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bd509ce8-516a-436a-a9c2-8b7d9bd66148")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a AccountSpec
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(AccountSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountSpecDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(AccountSpec element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountSpecDomainRoleId, newModel);
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0xcfd16509, 0x7091, 0x4253, 0x8f, 0x49, 0xb7, 0xf5, 0x88, 0x8d, 0x56, 0x43);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Descrição de Empresa.MoneyManagerModel.ModelTemAccountSpec.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelTemAccountSpec/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelTemAccountSpec/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelTemAccountSpec/AccountSpec.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cfd16509-7091-4253-8f49-b7f5888d5643")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpec of a Model
		/// <summary>
		/// Gets a list of AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountSpec> GetAccountSpec(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountSpec>, AccountSpec>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelTemAccountSpec links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> GetLinksToAccountSpec ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>(modelInstance, global::Empresa.MoneyManagerModel.ModelTemAccountSpec.ModelDomainRoleId);
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the ModelTemAccountSpec link to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelTemAccountSpec GetLinkToModel (global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>(accountSpecInstance, global::Empresa.MoneyManagerModel.ModelTemAccountSpec.AccountSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelTemAccountSpec instance accessors
		
		/// <summary>
		/// Get any ModelTemAccountSpec links between a given Model and a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AccountSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>(source, global::Empresa.MoneyManagerModel.ModelTemAccountSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelTemAccountSpec link in links )
			{
				if ( target.Equals(link.AccountSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelTemAccountSpec link between a given Modeland a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelTemAccountSpec GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AccountSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelTemAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelTemAccountSpec>(source, global::Empresa.MoneyManagerModel.ModelTemAccountSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelTemAccountSpec link in links )
			{
				if ( target.Equals(link.AccountSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasTransactionSpec
	/// Description for Empresa.MoneyManagerModel.ModelHasTransactionSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("71d817dc-9158-4a9d-adca-017406a8e6dc")]
	public partial class ModelHasTransactionSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasTransactionSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x71d817dc, 0x9158, 0x4a9d, 0xad, 0xca, 0x01, 0x74, 0x06, 0xa8, 0xe6, 0xdc);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasTransactionSpec link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">TransactionSpec to use as the target of the relationship.</param>
		public ModelHasTransactionSpec(Model source, TransactionSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasTransactionSpec.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasTransactionSpec.TransactionSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasTransactionSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasTransactionSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasTransactionSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasTransactionSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x7946605b, 0x433c, 0x4abd, 0x8e, 0x14, 0xbc, 0x32, 0x84, 0x26, 0xb6, 0x55);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Empresa.MoneyManagerModel.ModelHasTransactionSpec.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasTransactionSpec/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7946605b-433c-4abd-8e14-bc328426b655")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a TransactionSpec
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(TransactionSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionSpecDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(TransactionSpec element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionSpecDomainRoleId, newModel);
		}
		#endregion
		#region TransactionSpec domain role code
		
		/// <summary>
		/// TransactionSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSpecDomainRoleId = new global::System.Guid(0xaae12d88, 0x3f55, 0x4e45, 0x92, 0xee, 0xbd, 0x2b, 0x58, 0xda, 0x31, 0x22);
		
		/// <summary>
		/// DomainRole TransactionSpec
		/// Description for
		/// Empresa.MoneyManagerModel.ModelHasTransactionSpec.TransactionSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec/TransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasTransactionSpec/TransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasTransactionSpec/TransactionSpec.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aae12d88-3f55-4e45-92ee-bd2b58da3122")]
		public virtual TransactionSpec TransactionSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSpec of a Model
		/// <summary>
		/// Gets a list of TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionSpec> GetTransactionSpec(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionSpec>, TransactionSpec>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasTransactionSpec links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> GetLinksToTransactionSpec ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.ModelDomainRoleId);
		}
		#endregion
		#region TransactionSpec link accessor
		/// <summary>
		/// Get the ModelHasTransactionSpec link to a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasTransactionSpec GetLinkToModel (global::Empresa.MoneyManagerModel.TransactionSpec transactionSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>(transactionSpecInstance, global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.TransactionSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasTransactionSpec instance accessors
		
		/// <summary>
		/// Get any ModelHasTransactionSpec links between a given Model and a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.TransactionSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>(source, global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasTransactionSpec link in links )
			{
				if ( target.Equals(link.TransactionSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasTransactionSpec link between a given Modeland a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasTransactionSpec GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.TransactionSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasTransactionSpec>(source, global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasTransactionSpec link in links )
			{
				if ( target.Equals(link.TransactionSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasAttributeType
	/// Description for Empresa.MoneyManagerModel.ModelHasAttributeType
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a48dae22-17e7-47a6-87a6-5fd7184d1533")]
	public partial class ModelHasAttributeType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasAttributeType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa48dae22, 0x17e7, 0x47a6, 0x87, 0xa6, 0x5f, 0xd7, 0x18, 0x4d, 0x15, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasAttributeType link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public ModelHasAttributeType(Model source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasAttributeType.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasAttributeType.AttributeTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAttributeType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAttributeType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAttributeType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAttributeType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x1f1e59fa, 0xe8b6, 0x4e97, 0x9f, 0x1b, 0x95, 0x89, 0x4e, 0x70, 0xf7, 0xe9);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Empresa.MoneyManagerModel.ModelHasAttributeType.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAttributeType/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAttributeType/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeType", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasAttributeType/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1f1e59fa-e8b6-4e97-9f1b-95894e70f7e9")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a AttributeType
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypeDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(AttributeType element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypeDomainRoleId, newModel);
		}
		#endregion
		#region AttributeType domain role code
		
		/// <summary>
		/// AttributeType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypeDomainRoleId = new global::System.Guid(0x6a55a51f, 0x4c0e, 0x4cca, 0xaa, 0xcf, 0x31, 0x3f, 0x42, 0x7f, 0x87, 0x7c);
		
		/// <summary>
		/// DomainRole AttributeType
		/// Description for Empresa.MoneyManagerModel.ModelHasAttributeType.AttributeType
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAttributeType/AttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAttributeType/AttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasAttributeType/AttributeType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6a55a51f-4c0e-4cca-aacf-313f427f877c")]
		public virtual AttributeType AttributeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeType of a Model
		/// <summary>
		/// Gets a list of AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AttributeType> GetAttributeType(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AttributeType>, AttributeType>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasAttributeType links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasAttributeType> GetLinksToAttributeType ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAttributeType>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasAttributeType.ModelDomainRoleId);
		}
		#endregion
		#region AttributeType link accessor
		/// <summary>
		/// Get the ModelHasAttributeType link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasAttributeType GetLinkToModel (global::Empresa.MoneyManagerModel.AttributeType attributeTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAttributeType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAttributeType>(attributeTypeInstance, global::Empresa.MoneyManagerModel.ModelHasAttributeType.AttributeTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasAttributeType instance accessors
		
		/// <summary>
		/// Get any ModelHasAttributeType links between a given Model and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasAttributeType> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasAttributeType> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasAttributeType>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAttributeType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAttributeType>(source, global::Empresa.MoneyManagerModel.ModelHasAttributeType.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasAttributeType link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasAttributeType link between a given Modeland a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasAttributeType GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAttributeType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAttributeType>(source, global::Empresa.MoneyManagerModel.ModelHasAttributeType.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasAttributeType link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship UserSpecTemUserAttribute
	/// Descrição de Empresa.MoneyManagerModel.UserSpecTemUserAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c4053548-df3b-4d73-bdda-f20e22055e17")]
	public partial class UserSpecTemUserAttribute : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserSpecTemUserAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc4053548, 0xdf3b, 0x4d73, 0xbd, 0xda, 0xf2, 0x0e, 0x22, 0x05, 0x5e, 0x17);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserSpecTemUserAttribute link in the same Partition as the given UserSpec
		/// </summary>
		/// <param name="source">UserSpec to use as the source of the relationship.</param>
		/// <param name="target">UserAttribute to use as the target of the relationship.</param>
		public UserSpecTemUserAttribute(UserSpec source, UserAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserSpecTemUserAttribute.UserSpecDomainRoleId, source), new DslModeling::RoleAssignment(UserSpecTemUserAttribute.UserAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserSpecTemUserAttribute(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserSpecTemUserAttribute(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserSpecTemUserAttribute(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserSpecTemUserAttribute(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UserSpec domain role code
		
		/// <summary>
		/// UserSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserSpecDomainRoleId = new global::System.Guid(0xc3dd25ae, 0xfc31, 0x45be, 0x8b, 0x95, 0xdf, 0xa7, 0x14, 0xc1, 0x3f, 0x2d);
		
		/// <summary>
		/// DomainRole UserSpec
		/// Descrição de Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UserAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c3dd25ae-fc31-45be-8b95-dfa714c13f2d")]
		public virtual UserSpec UserSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserSpec of a UserAttribute
		/// <summary>
		/// Gets UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UserSpec GetUserSpec(UserAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserAttributeDomainRoleId) as UserSpec;
		}
		
		/// <summary>
		/// Sets UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUserSpec(UserAttribute element, UserSpec newUserSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserAttributeDomainRoleId, newUserSpec);
		}
		#endregion
		#region UserAttribute domain role code
		
		/// <summary>
		/// UserAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserAttributeDomainRoleId = new global::System.Guid(0x14d6ad66, 0xa178, 0x4b26, 0xb9, 0xa9, 0x94, 0x23, 0xd8, 0x38, 0x03, 0xa2);
		
		/// <summary>
		/// DomainRole UserAttribute
		/// Descrição de Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UserSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserSpecTemUserAttribute/UserAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("14d6ad66-a178-4b26-b9a9-9423d83803a2")]
		public virtual UserAttribute UserAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserAttribute of a UserSpec
		/// <summary>
		/// Gets a list of UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UserAttribute> GetUserAttribute(UserSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UserAttribute>, UserAttribute>(element, UserSpecDomainRoleId);
		}
		#endregion
		#region UserSpec link accessor
		/// <summary>
		/// Get the list of UserSpecTemUserAttribute links to a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> GetLinksToUserAttribute ( global::Empresa.MoneyManagerModel.UserSpec userSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>(userSpecInstance, global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserSpecDomainRoleId);
		}
		#endregion
		#region UserAttribute link accessor
		/// <summary>
		/// Get the UserSpecTemUserAttribute link to a UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute GetLinkToUserSpec (global::Empresa.MoneyManagerModel.UserAttribute userAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>(userAttributeInstance, global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UserAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UserSpecTemUserAttribute instance accessors
		
		/// <summary>
		/// Get any UserSpecTemUserAttribute links between a given UserSpec and a UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> GetLinks( global::Empresa.MoneyManagerModel.UserSpec source, global::Empresa.MoneyManagerModel.UserAttribute target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>(source, global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute link in links )
			{
				if ( target.Equals(link.UserAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserSpecTemUserAttribute link between a given UserSpecand a UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute GetLink( global::Empresa.MoneyManagerModel.UserSpec source, global::Empresa.MoneyManagerModel.UserAttribute target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute>(source, global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute link in links )
			{
				if ( target.Equals(link.UserAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AccountSpecTemAccountAttribute
	/// Descrição de Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("32c24c76-41a9-4bdd-83d5-c0942d0c7abe")]
	public partial class AccountSpecTemAccountAttribute : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AccountSpecTemAccountAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x32c24c76, 0x41a9, 0x4bdd, 0x83, 0xd5, 0xc0, 0x94, 0x2d, 0x0c, 0x7a, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AccountSpecTemAccountAttribute link in the same Partition as the given AccountSpec
		/// </summary>
		/// <param name="source">AccountSpec to use as the source of the relationship.</param>
		/// <param name="target">AccountAttribute to use as the target of the relationship.</param>
		public AccountSpecTemAccountAttribute(AccountSpec source, AccountAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AccountSpecTemAccountAttribute.AccountSpecDomainRoleId, source), new DslModeling::RoleAssignment(AccountSpecTemAccountAttribute.AccountAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecTemAccountAttribute(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecTemAccountAttribute(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecTemAccountAttribute(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecTemAccountAttribute(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0xa1c3e4e6, 0xf741, 0x4a30, 0x8b, 0xed, 0x2a, 0x38, 0x36, 0x65, 0x22, 0xdd);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a1c3e4e6-f741-4a30-8bed-2a38366522dd")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpec of a AccountAttribute
		/// <summary>
		/// Gets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountSpec GetAccountSpec(AccountAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountAttributeDomainRoleId) as AccountSpec;
		}
		
		/// <summary>
		/// Sets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountSpec(AccountAttribute element, AccountSpec newAccountSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountAttributeDomainRoleId, newAccountSpec);
		}
		#endregion
		#region AccountAttribute domain role code
		
		/// <summary>
		/// AccountAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountAttributeDomainRoleId = new global::System.Guid(0xaf51eae4, 0xc13e, 0x4dcc, 0x9f, 0x8d, 0x55, 0x99, 0x8a, 0x89, 0xf0, 0x2b);
		
		/// <summary>
		/// DomainRole AccountAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AccountSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute/AccountAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("af51eae4-c13e-4dcc-9f8d-55998a89f02b")]
		public virtual AccountAttribute AccountAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountAttribute of a AccountSpec
		/// <summary>
		/// Gets a list of AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountAttribute> GetAccountAttribute(AccountSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountAttribute>, AccountAttribute>(element, AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the list of AccountSpecTemAccountAttribute links to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> GetLinksToAccountAttribute ( global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>(accountSpecInstance, global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountAttribute link accessor
		/// <summary>
		/// Get the AccountSpecTemAccountAttribute link to a AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute GetLinkToAccountSpec (global::Empresa.MoneyManagerModel.AccountAttribute accountAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>(accountAttributeInstance, global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountSpecTemAccountAttribute instance accessors
		
		/// <summary>
		/// Get any AccountSpecTemAccountAttribute links between a given AccountSpec and a AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> GetLinks( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.AccountAttribute target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>(source, global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute link in links )
			{
				if ( target.Equals(link.AccountAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AccountSpecTemAccountAttribute link between a given AccountSpecand a AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute GetLink( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.AccountAttribute target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute>(source, global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute link in links )
			{
				if ( target.Equals(link.AccountAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship TransactionSpecTemTransactionAttribute
	/// Descrição de Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("de7c37fc-e9b3-48b4-b7c6-b98c33363cb7")]
	public partial class TransactionSpecTemTransactionAttribute : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionSpecTemTransactionAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde7c37fc, 0xe9b3, 0x48b4, 0xb7, 0xc6, 0xb9, 0x8c, 0x33, 0x36, 0x3c, 0xb7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionSpecTemTransactionAttribute link in the same Partition as the given TransactionSpec
		/// </summary>
		/// <param name="source">TransactionSpec to use as the source of the relationship.</param>
		/// <param name="target">TransactionAttribute to use as the target of the relationship.</param>
		public TransactionSpecTemTransactionAttribute(TransactionSpec source, TransactionAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId, source), new DslModeling::RoleAssignment(TransactionSpecTemTransactionAttribute.TransactionAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecTemTransactionAttribute(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecTemTransactionAttribute(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecTemTransactionAttribute(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecTemTransactionAttribute(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionSpec domain role code
		
		/// <summary>
		/// TransactionSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSpecDomainRoleId = new global::System.Guid(0xde79b977, 0x1251, 0x4f44, 0xa3, 0x9e, 0x38, 0xb6, 0x71, 0x33, 0x8d, 0x6a);
		
		/// <summary>
		/// DomainRole TransactionSpec
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TransactionAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("de79b977-1251-4f44-a39e-38b671338d6a")]
		public virtual TransactionSpec TransactionSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSpec of a TransactionAttribute
		/// <summary>
		/// Gets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionSpec GetTransactionSpec(TransactionAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionAttributeDomainRoleId) as TransactionSpec;
		}
		
		/// <summary>
		/// Sets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionSpec(TransactionAttribute element, TransactionSpec newTransactionSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionAttributeDomainRoleId, newTransactionSpec);
		}
		#endregion
		#region TransactionAttribute domain role code
		
		/// <summary>
		/// TransactionAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionAttributeDomainRoleId = new global::System.Guid(0x88abdc2e, 0x5ffa, 0x4c6d, 0x85, 0x34, 0x82, 0x71, 0xfb, 0x27, 0xf9, 0x46);
		
		/// <summary>
		/// DomainRole TransactionAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute/TransactionAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("88abdc2e-5ffa-4c6d-8534-8271fb27f946")]
		public virtual TransactionAttribute TransactionAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionAttribute of a TransactionSpec
		/// <summary>
		/// Gets a list of TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<TransactionAttribute> GetTransactionAttribute(TransactionSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TransactionAttribute>, TransactionAttribute>(element, TransactionSpecDomainRoleId);
		}
		#endregion
		#region TransactionSpec link accessor
		/// <summary>
		/// Get the list of TransactionSpecTemTransactionAttribute links to a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> GetLinksToTransactionAttribute ( global::Empresa.MoneyManagerModel.TransactionSpec transactionSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>(transactionSpecInstance, global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId);
		}
		#endregion
		#region TransactionAttribute link accessor
		/// <summary>
		/// Get the TransactionSpecTemTransactionAttribute link to a TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute GetLinkToTransactionSpec (global::Empresa.MoneyManagerModel.TransactionAttribute transactionAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>(transactionAttributeInstance, global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionSpecTemTransactionAttribute instance accessors
		
		/// <summary>
		/// Get any TransactionSpecTemTransactionAttribute links between a given TransactionSpec and a TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> GetLinks( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.TransactionAttribute target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>(source, global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute link in links )
			{
				if ( target.Equals(link.TransactionAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionSpecTemTransactionAttribute link between a given TransactionSpecand a TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute GetLink( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.TransactionAttribute target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute>(source, global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute link in links )
			{
				if ( target.Equals(link.TransactionAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship UserAttributeReferênciasAttributeTypes
	/// Descrição de Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cdd42d84-be23-4047-b9c2-2eb011f3b634")]
	public partial class UserAttributeReferênciasAttributeTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserAttributeReferênciasAttributeTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcdd42d84, 0xbe23, 0x4047, 0xb9, 0xc2, 0x2e, 0xb0, 0x11, 0xf3, 0xb6, 0x34);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserAttributeReferênciasAttributeTypes link in the same Partition as the given UserAttribute
		/// </summary>
		/// <param name="source">UserAttribute to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public UserAttributeReferênciasAttributeTypes(UserAttribute source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId, source), new DslModeling::RoleAssignment(UserAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserAttributeReferênciasAttributeTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserAttributeReferênciasAttributeTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserAttributeReferênciasAttributeTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserAttributeReferênciasAttributeTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UserAttribute domain role code
		
		/// <summary>
		/// UserAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserAttributeDomainRoleId = new global::System.Guid(0x8665a90f, 0x61da, 0x4778, 0x80, 0x5d, 0xf3, 0x79, 0x8f, 0xdd, 0x11, 0xb2);
		
		/// <summary>
		/// DomainRole UserAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.UserAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/UserAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/UserAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeTypes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/UserAttribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8665a90f-61da-4778-805d-f3798fdd11b2")]
		public virtual UserAttribute UserAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserAttributes of a AttributeType
		/// <summary>
		/// Gets UserAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UserAttribute GetUserAttributes(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypeDomainRoleId) as UserAttribute;
		}
		
		/// <summary>
		/// Sets UserAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUserAttributes(AttributeType element, UserAttribute newUserAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypeDomainRoleId, newUserAttribute);
		}
		#endregion
		#region AttributeType domain role code
		
		/// <summary>
		/// AttributeType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypeDomainRoleId = new global::System.Guid(0x9b987e29, 0x7a81, 0x4f14, 0x9b, 0xc5, 0xe6, 0x5b, 0x23, 0x85, 0x68, 0xf5);
		
		/// <summary>
		/// DomainRole AttributeType
		/// Descrição de
		/// Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.AttributeType
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/AttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/AttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UserAttributes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes/AttributeType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9b987e29-7a81-4f14-9bc5-e65b238568f5")]
		public virtual AttributeType AttributeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeTypes of a UserAttribute
		/// <summary>
		/// Gets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributeType GetAttributeTypes(UserAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserAttributeDomainRoleId) as AttributeType;
		}
		
		/// <summary>
		/// Sets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttributeTypes(UserAttribute element, AttributeType newAttributeType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserAttributeDomainRoleId, newAttributeType);
		}
		#endregion
		#region UserAttribute link accessor
		/// <summary>
		/// Get the UserAttributeReferênciasAttributeTypes link to a UserAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes GetLinkToAttributeTypes (global::Empresa.MoneyManagerModel.UserAttribute userAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>(userAttributeInstance, global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UserAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeType link accessor
		/// <summary>
		/// Get the UserAttributeReferênciasAttributeTypes link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes GetLinkToUserAttributes (global::Empresa.MoneyManagerModel.AttributeType attributeTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>(attributeTypeInstance, global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UserAttributeReferênciasAttributeTypes instance accessors
		
		/// <summary>
		/// Get any UserAttributeReferênciasAttributeTypes links between a given UserAttribute and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> GetLinks( global::Empresa.MoneyManagerModel.UserAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserAttributeReferênciasAttributeTypes link between a given UserAttributeand a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes GetLink( global::Empresa.MoneyManagerModel.UserAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AccountAttributeReferênciasAttributeTypes
	/// Descrição de Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("388d4ea2-566a-4389-aa00-43e61dfa4229")]
	public partial class AccountAttributeReferênciasAttributeTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AccountAttributeReferênciasAttributeTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x388d4ea2, 0x566a, 0x4389, 0xaa, 0x00, 0x43, 0xe6, 0x1d, 0xfa, 0x42, 0x29);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AccountAttributeReferênciasAttributeTypes link in the same Partition as the given AccountAttribute
		/// </summary>
		/// <param name="source">AccountAttribute to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public AccountAttributeReferênciasAttributeTypes(AccountAttribute source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId, source), new DslModeling::RoleAssignment(AccountAttributeReferênciasAttributeTypes.AttributeTypesDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountAttributeReferênciasAttributeTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountAttributeReferênciasAttributeTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountAttributeReferênciasAttributeTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountAttributeReferênciasAttributeTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AccountAttribute domain role code
		
		/// <summary>
		/// AccountAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountAttributeDomainRoleId = new global::System.Guid(0xfa0faf94, 0x0a08, 0x4d1b, 0xb3, 0x57, 0x4a, 0x4b, 0x45, 0x6d, 0x38, 0x7f);
		
		/// <summary>
		/// DomainRole AccountAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AccountAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AccountAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AccountAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeTypes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AccountAttribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fa0faf94-0a08-4d1b-b357-4a4b456d387f")]
		public virtual AccountAttribute AccountAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountAttribute of a AttributeType
		/// <summary>
		/// Gets AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountAttribute GetAccountAttribute(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypesDomainRoleId) as AccountAttribute;
		}
		
		/// <summary>
		/// Sets AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountAttribute(AttributeType element, AccountAttribute newAccountAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypesDomainRoleId, newAccountAttribute);
		}
		#endregion
		#region AttributeTypes domain role code
		
		/// <summary>
		/// AttributeTypes domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypesDomainRoleId = new global::System.Guid(0xb70659ff, 0xebe2, 0x41dc, 0xaf, 0x83, 0x9c, 0x4c, 0xed, 0xc9, 0x3b, 0xf9);
		
		/// <summary>
		/// DomainRole AttributeTypes
		/// Descrição de
		/// Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AttributeTypes
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AttributeTypes.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AttributeTypes.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AccountAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes/AttributeTypes.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b70659ff-ebe2-41dc-af83-9c4cedc93bf9")]
		public virtual AttributeType AttributeTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeTypes of a AccountAttribute
		/// <summary>
		/// Gets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributeType GetAttributeTypes(AccountAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountAttributeDomainRoleId) as AttributeType;
		}
		
		/// <summary>
		/// Sets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttributeTypes(AccountAttribute element, AttributeType newAttributeTypes)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountAttributeDomainRoleId, newAttributeTypes);
		}
		#endregion
		#region AccountAttribute link accessor
		/// <summary>
		/// Get the AccountAttributeReferênciasAttributeTypes link to a AccountAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes GetLinkToAttributeTypes (global::Empresa.MoneyManagerModel.AccountAttribute accountAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>(accountAttributeInstance, global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeTypes link accessor
		/// <summary>
		/// Get the AccountAttributeReferênciasAttributeTypes link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes GetLinkToAccountAttribute (global::Empresa.MoneyManagerModel.AttributeType attributeTypesInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>(attributeTypesInstance, global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AttributeTypesDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeTypes not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountAttributeReferênciasAttributeTypes instance accessors
		
		/// <summary>
		/// Get any AccountAttributeReferênciasAttributeTypes links between a given AccountAttribute and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> GetLinks( global::Empresa.MoneyManagerModel.AccountAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeTypes) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AccountAttributeReferênciasAttributeTypes link between a given AccountAttributeand a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes GetLink( global::Empresa.MoneyManagerModel.AccountAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeTypes) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship TransactionAttributeReferênciasAttributeTypes
	/// Descrição de
	/// Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7beab260-bab2-4258-8d18-d00fa4f13723")]
	public partial class TransactionAttributeReferênciasAttributeTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionAttributeReferênciasAttributeTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7beab260, 0xbab2, 0x4258, 0x8d, 0x18, 0xd0, 0x0f, 0xa4, 0xf1, 0x37, 0x23);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionAttributeReferênciasAttributeTypes link in the same Partition as the given TransactionAttribute
		/// </summary>
		/// <param name="source">TransactionAttribute to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public TransactionAttributeReferênciasAttributeTypes(TransactionAttribute source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId, source), new DslModeling::RoleAssignment(TransactionAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionAttributeReferênciasAttributeTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionAttributeReferênciasAttributeTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionAttributeReferênciasAttributeTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionAttributeReferênciasAttributeTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionAttribute domain role code
		
		/// <summary>
		/// TransactionAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionAttributeDomainRoleId = new global::System.Guid(0xe9040c72, 0xbee9, 0x4d58, 0xbd, 0xa8, 0x5e, 0xb1, 0xdc, 0x83, 0x27, 0x04);
		
		/// <summary>
		/// DomainRole TransactionAttribute
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.TransactionAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/TransactionAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/TransactionAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeTypes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/TransactionAttribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e9040c72-bee9-4d58-bda8-5eb1dc832704")]
		public virtual TransactionAttribute TransactionAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionAttributes of a AttributeType
		/// <summary>
		/// Gets TransactionAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionAttribute GetTransactionAttributes(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypeDomainRoleId) as TransactionAttribute;
		}
		
		/// <summary>
		/// Sets TransactionAttributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionAttributes(AttributeType element, TransactionAttribute newTransactionAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypeDomainRoleId, newTransactionAttribute);
		}
		#endregion
		#region AttributeType domain role code
		
		/// <summary>
		/// AttributeType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypeDomainRoleId = new global::System.Guid(0x6f336c0a, 0xc0b7, 0x46f5, 0xaf, 0x5f, 0x3a, 0x46, 0xe2, 0xf3, 0xb3, 0x4e);
		
		/// <summary>
		/// DomainRole AttributeType
		/// Descrição de
		/// Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.AttributeType
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/AttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/AttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionAttributes", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes/AttributeType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6f336c0a-c0b7-46f5-af5f-3a46e2f3b34e")]
		public virtual AttributeType AttributeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeTypes of a TransactionAttribute
		/// <summary>
		/// Gets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributeType GetAttributeTypes(TransactionAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TransactionAttributeDomainRoleId) as AttributeType;
		}
		
		/// <summary>
		/// Sets AttributeTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttributeTypes(TransactionAttribute element, AttributeType newAttributeType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TransactionAttributeDomainRoleId, newAttributeType);
		}
		#endregion
		#region TransactionAttribute link accessor
		/// <summary>
		/// Get the TransactionAttributeReferênciasAttributeTypes link to a TransactionAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes GetLinkToAttributeTypes (global::Empresa.MoneyManagerModel.TransactionAttribute transactionAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>(transactionAttributeInstance, global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TransactionAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeType link accessor
		/// <summary>
		/// Get the TransactionAttributeReferênciasAttributeTypes link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes GetLinkToTransactionAttributes (global::Empresa.MoneyManagerModel.AttributeType attributeTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>(attributeTypeInstance, global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionAttributeReferênciasAttributeTypes instance accessors
		
		/// <summary>
		/// Get any TransactionAttributeReferênciasAttributeTypes links between a given TransactionAttribute and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> GetLinks( global::Empresa.MoneyManagerModel.TransactionAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionAttributeReferênciasAttributeTypes link between a given TransactionAttributeand a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes GetLink( global::Empresa.MoneyManagerModel.TransactionAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes>(source, global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionAttributeReferênciasAttributeTypes link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasAccountGroupSpec
	/// Description for Empresa.MoneyManagerModel.ModelHasAccountGroupSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("99e383d8-3931-42e7-ba2b-d96f8206be40")]
	public partial class ModelHasAccountGroupSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasAccountGroupSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99e383d8, 0x3931, 0x42e7, 0xba, 0x2b, 0xd9, 0x6f, 0x82, 0x06, 0xbe, 0x40);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasAccountGroupSpec link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">AccountGroupSpec to use as the target of the relationship.</param>
		public ModelHasAccountGroupSpec(Model source, AccountGroupSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasAccountGroupSpec.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasAccountGroupSpec.AccountGroupSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAccountGroupSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAccountGroupSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAccountGroupSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAccountGroupSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x4f87e073, 0xfbdb, 0x4269, 0xa5, 0xcc, 0x21, 0xf9, 0xf2, 0x56, 0xcc, 0x28);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAccountGroupSpec/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAccountGroupSpec/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountGroupSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasAccountGroupSpec/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4f87e073-fbdb-4269-a5cc-21f9f256cc28")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a AccountGroupSpec
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(AccountGroupSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountGroupSpecDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(AccountGroupSpec element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountGroupSpecDomainRoleId, newModel);
		}
		#endregion
		#region AccountGroupSpec domain role code
		
		/// <summary>
		/// AccountGroupSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountGroupSpecDomainRoleId = new global::System.Guid(0xd425e915, 0xcfc9, 0x4180, 0xa0, 0xbf, 0x8a, 0x15, 0x63, 0xdb, 0xc7, 0x1e);
		
		/// <summary>
		/// DomainRole AccountGroupSpec
		/// Description for
		/// Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.AccountGroupSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAccountGroupSpec/AccountGroupSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAccountGroupSpec/AccountGroupSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasAccountGroupSpec/AccountGroupSpec.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d425e915-cfc9-4180-a0bf-8a1563dbc71e")]
		public virtual AccountGroupSpec AccountGroupSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountGroupSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountGroupSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountGroupSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountGroupSpec of a Model
		/// <summary>
		/// Gets a list of AccountGroupSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountGroupSpec> GetAccountGroupSpec(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountGroupSpec>, AccountGroupSpec>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasAccountGroupSpec links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec> GetLinksToAccountGroupSpec ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.ModelDomainRoleId);
		}
		#endregion
		#region AccountGroupSpec link accessor
		/// <summary>
		/// Get the ModelHasAccountGroupSpec link to a AccountGroupSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec GetLinkToModel (global::Empresa.MoneyManagerModel.AccountGroupSpec accountGroupSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec>(accountGroupSpecInstance, global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.AccountGroupSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountGroupSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasAccountGroupSpec instance accessors
		
		/// <summary>
		/// Get any ModelHasAccountGroupSpec links between a given Model and a AccountGroupSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AccountGroupSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec>(source, global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec link in links )
			{
				if ( target.Equals(link.AccountGroupSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasAccountGroupSpec link between a given Modeland a AccountGroupSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AccountGroupSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec>(source, global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec link in links )
			{
				if ( target.Equals(link.AccountGroupSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AccountGroupSpecReferencesAccountSpec
	/// Description for Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d99df43e-92a3-4179-821c-09cee7606f1d")]
	public partial class AccountGroupSpecReferencesAccountSpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AccountGroupSpecReferencesAccountSpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd99df43e, 0x92a3, 0x4179, 0x82, 0x1c, 0x09, 0xce, 0xe7, 0x60, 0x6f, 0x1d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AccountGroupSpecReferencesAccountSpec link in the same Partition as the given AccountGroupSpec
		/// </summary>
		/// <param name="source">AccountGroupSpec to use as the source of the relationship.</param>
		/// <param name="target">AccountSpec to use as the target of the relationship.</param>
		public AccountGroupSpecReferencesAccountSpec(AccountGroupSpec source, AccountSpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AccountGroupSpecReferencesAccountSpec.AccountGroupSpecDomainRoleId, source), new DslModeling::RoleAssignment(AccountGroupSpecReferencesAccountSpec.AccountSpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountGroupSpecReferencesAccountSpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountGroupSpecReferencesAccountSpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountGroupSpecReferencesAccountSpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountGroupSpecReferencesAccountSpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AccountGroupSpec domain role code
		
		/// <summary>
		/// AccountGroupSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountGroupSpecDomainRoleId = new global::System.Guid(0x39b23029, 0x5322, 0x4eb3, 0xb1, 0x2a, 0xc5, 0x2b, 0xd8, 0xb6, 0x94, 0xcc);
		
		/// <summary>
		/// DomainRole AccountGroupSpec
		/// Description for
		/// Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec.AccountGroupSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec/AccountGroupSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec/AccountGroupSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec/AccountGroupSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("39b23029-5322-4eb3-b12a-c52bd8b694cc")]
		public virtual AccountGroupSpec AccountGroupSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountGroupSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountGroupSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountGroupSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountGroupSpec of a AccountSpec
		/// <summary>
		/// Gets AccountGroupSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountGroupSpec GetAccountGroupSpec(AccountSpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountSpecDomainRoleId) as AccountGroupSpec;
		}
		
		/// <summary>
		/// Sets AccountGroupSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountGroupSpec(AccountSpec element, AccountGroupSpec newAccountGroupSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountSpecDomainRoleId, newAccountGroupSpec);
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0x0438b51c, 0x7363, 0x4c69, 0x9d, 0xa2, 0x65, 0xdd, 0x94, 0x3b, 0x7e, 0xf2);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Description for
		/// Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AccountGroupSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec/AccountSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0438b51c-7363-4c69-9da2-65dd943b7ef2")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpec of a AccountGroupSpec
		/// <summary>
		/// Gets a list of AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountSpec> GetAccountSpec(AccountGroupSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountSpec>, AccountSpec>(element, AccountGroupSpecDomainRoleId);
		}
		#endregion
		#region AccountGroupSpec link accessor
		/// <summary>
		/// Get the list of AccountGroupSpecReferencesAccountSpec links to a AccountGroupSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec> GetLinksToAccountSpec ( global::Empresa.MoneyManagerModel.AccountGroupSpec accountGroupSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec>(accountGroupSpecInstance, global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec.AccountGroupSpecDomainRoleId);
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the AccountGroupSpecReferencesAccountSpec link to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec GetLinkToAccountGroupSpec (global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec>(accountSpecInstance, global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec.AccountSpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountSpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountGroupSpecReferencesAccountSpec instance accessors
		
		/// <summary>
		/// Get any AccountGroupSpecReferencesAccountSpec links between a given AccountGroupSpec and a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec> GetLinks( global::Empresa.MoneyManagerModel.AccountGroupSpec source, global::Empresa.MoneyManagerModel.AccountSpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec>(source, global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec.AccountGroupSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec link in links )
			{
				if ( target.Equals(link.AccountSpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AccountGroupSpecReferencesAccountSpec link between a given AccountGroupSpecand a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec GetLink( global::Empresa.MoneyManagerModel.AccountGroupSpec source, global::Empresa.MoneyManagerModel.AccountSpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec>(source, global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec.AccountGroupSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountGroupSpecReferencesAccountSpec link in links )
			{
				if ( target.Equals(link.AccountSpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasUserAccountAssociation
	/// Description for Empresa.MoneyManagerModel.ModelHasUserAccountAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("920962a0-571e-497d-bc99-10cc71adb2e6")]
	public partial class ModelHasUserAccountAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasUserAccountAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x920962a0, 0x571e, 0x497d, 0xbc, 0x99, 0x10, 0xcc, 0x71, 0xad, 0xb2, 0xe6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasUserAccountAssociation link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">UserAccountAssociation to use as the target of the relationship.</param>
		public ModelHasUserAccountAssociation(Model source, UserAccountAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasUserAccountAssociation.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasUserAccountAssociation.UserAccountAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasUserAccountAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasUserAccountAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasUserAccountAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasUserAccountAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x90f8735c, 0xcf90, 0x4a6c, 0x92, 0xd1, 0x7c, 0x61, 0xab, 0xfa, 0x2a, 0x25);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasUserAccountAssociation/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasUserAccountAssociation/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UserAccountAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasUserAccountAssociation/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("90f8735c-cf90-4a6c-92d1-7c61abfa2a25")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a UserAccountAssociation
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(UserAccountAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserAccountAssociationDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(UserAccountAssociation element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserAccountAssociationDomainRoleId, newModel);
		}
		#endregion
		#region UserAccountAssociation domain role code
		
		/// <summary>
		/// UserAccountAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserAccountAssociationDomainRoleId = new global::System.Guid(0x7bc95540, 0x6634, 0x4291, 0x98, 0xe7, 0x92, 0xf6, 0xd3, 0x8a, 0x40, 0x81);
		
		/// <summary>
		/// DomainRole UserAccountAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.UserAccountAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasUserAccountAssociation/UserAccountAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasUserAccountAssociation/UserAccountAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasUserAccountAssociation/UserAccountAssociation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7bc95540-6634-4291-98e7-92f6d38a4081")]
		public virtual UserAccountAssociation UserAccountAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserAccountAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserAccountAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserAccountAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserAccountAssociation of a Model
		/// <summary>
		/// Gets a list of UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UserAccountAssociation> GetUserAccountAssociation(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UserAccountAssociation>, UserAccountAssociation>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasUserAccountAssociation links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation> GetLinksToUserAccountAssociation ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.ModelDomainRoleId);
		}
		#endregion
		#region UserAccountAssociation link accessor
		/// <summary>
		/// Get the ModelHasUserAccountAssociation link to a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation GetLinkToModel (global::Empresa.MoneyManagerModel.UserAccountAssociation userAccountAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation>(userAccountAssociationInstance, global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.UserAccountAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UserAccountAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasUserAccountAssociation instance accessors
		
		/// <summary>
		/// Get any ModelHasUserAccountAssociation links between a given Model and a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.UserAccountAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation>(source, global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation link in links )
			{
				if ( target.Equals(link.UserAccountAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasUserAccountAssociation link between a given Modeland a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.UserAccountAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation>(source, global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation link in links )
			{
				if ( target.Equals(link.UserAccountAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasAccountTransactionAssociation
	/// Description for Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b7777fe8-1b83-4599-b308-ae59f8eb442c")]
	public partial class ModelHasAccountTransactionAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasAccountTransactionAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7777fe8, 0x1b83, 0x4599, 0xb3, 0x08, 0xae, 0x59, 0xf8, 0xeb, 0x44, 0x2c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasAccountTransactionAssociation link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">AccountTransactionAssociation to use as the target of the relationship.</param>
		public ModelHasAccountTransactionAssociation(Model source, AccountTransactionAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasAccountTransactionAssociation.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAccountTransactionAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAccountTransactionAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasAccountTransactionAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasAccountTransactionAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x06f2f990, 0xe5de, 0x48e5, 0x8a, 0xf3, 0x61, 0xc3, 0x7d, 0x6b, 0xb0, 0x29);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountTransactionAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("06f2f990-e5de-48e5-8af3-61c37d6bb029")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a AccountTransactionAssociation
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(AccountTransactionAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountTransactionAssociationDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(AccountTransactionAssociation element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountTransactionAssociationDomainRoleId, newModel);
		}
		#endregion
		#region AccountTransactionAssociation domain role code
		
		/// <summary>
		/// AccountTransactionAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountTransactionAssociationDomainRoleId = new global::System.Guid(0xa7805d24, 0x9f71, 0x4c6c, 0xb9, 0x20, 0x13, 0x0f, 0xa3, 0x56, 0x10, 0x3c);
		
		/// <summary>
		/// DomainRole AccountTransactionAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.AccountTransactionAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation/AccountTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation/AccountTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation/AccountTransactionAssociation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a7805d24-9f71-4c6c-b920-130fa356103c")]
		public virtual AccountTransactionAssociation AccountTransactionAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountTransactionAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountTransactionAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountTransactionAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountTransactionAssociation of a Model
		/// <summary>
		/// Gets a list of AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountTransactionAssociation> GetAccountTransactionAssociation(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountTransactionAssociation>, AccountTransactionAssociation>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasAccountTransactionAssociation links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation> GetLinksToAccountTransactionAssociation ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.ModelDomainRoleId);
		}
		#endregion
		#region AccountTransactionAssociation link accessor
		/// <summary>
		/// Get the ModelHasAccountTransactionAssociation link to a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation GetLinkToModel (global::Empresa.MoneyManagerModel.AccountTransactionAssociation accountTransactionAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation>(accountTransactionAssociationInstance, global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountTransactionAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasAccountTransactionAssociation instance accessors
		
		/// <summary>
		/// Get any ModelHasAccountTransactionAssociation links between a given Model and a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AccountTransactionAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation>(source, global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation link in links )
			{
				if ( target.Equals(link.AccountTransactionAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasAccountTransactionAssociation link between a given Modeland a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.AccountTransactionAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation>(source, global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation link in links )
			{
				if ( target.Equals(link.AccountTransactionAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasCategorySpec
	/// Description for Empresa.MoneyManagerModel.ModelHasCategorySpec
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasCategorySpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasCategorySpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("360a5d5f-42b0-49dd-8726-49ba2d615250")]
	public partial class ModelHasCategorySpec : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasCategorySpec domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x360a5d5f, 0x42b0, 0x49dd, 0x87, 0x26, 0x49, 0xba, 0x2d, 0x61, 0x52, 0x50);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasCategorySpec link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">CategorySpec to use as the target of the relationship.</param>
		public ModelHasCategorySpec(Model source, CategorySpec target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasCategorySpec.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasCategorySpec.CategorySpecDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasCategorySpec(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasCategorySpec(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasCategorySpec(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasCategorySpec(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0xcf1a6a0b, 0x3705, 0x4ee1, 0xad, 0xa8, 0xac, 0x34, 0x27, 0xc5, 0x89, 0x5e);
		
		/// <summary>
		/// DomainRole Model
		/// Description for Empresa.MoneyManagerModel.ModelHasCategorySpec.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasCategorySpec/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasCategorySpec/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CategorySpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasCategorySpec/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("cf1a6a0b-3705-4ee1-ada8-ac3427c5895e")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a CategorySpec
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(CategorySpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CategorySpecDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(CategorySpec element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CategorySpecDomainRoleId, newModel);
		}
		#endregion
		#region CategorySpec domain role code
		
		/// <summary>
		/// CategorySpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid CategorySpecDomainRoleId = new global::System.Guid(0xf09d5f86, 0xb964, 0x4a57, 0xaf, 0xb5, 0x72, 0xd1, 0xa3, 0x71, 0x3d, 0x5f);
		
		/// <summary>
		/// DomainRole CategorySpec
		/// Description for Empresa.MoneyManagerModel.ModelHasCategorySpec.CategorySpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasCategorySpec/CategorySpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasCategorySpec/CategorySpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasCategorySpec/CategorySpec.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f09d5f86-b964-4a57-afb5-72d1a3713d5f")]
		public virtual CategorySpec CategorySpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CategorySpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, CategorySpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CategorySpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CategorySpec of a Model
		/// <summary>
		/// Gets CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CategorySpec GetCategorySpec(Model element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelDomainRoleId) as CategorySpec;
		}
		
		/// <summary>
		/// Sets CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCategorySpec(Model element, CategorySpec newCategorySpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelDomainRoleId, newCategorySpec);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the ModelHasCategorySpec link to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasCategorySpec GetLinkToCategorySpec (global::Empresa.MoneyManagerModel.Model modelInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasCategorySpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasCategorySpec>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasCategorySpec.ModelDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Model not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CategorySpec link accessor
		/// <summary>
		/// Get the ModelHasCategorySpec link to a CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasCategorySpec GetLinkToModel (global::Empresa.MoneyManagerModel.CategorySpec categorySpecInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasCategorySpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasCategorySpec>(categorySpecInstance, global::Empresa.MoneyManagerModel.ModelHasCategorySpec.CategorySpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CategorySpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasCategorySpec instance accessors
		
		/// <summary>
		/// Get any ModelHasCategorySpec links between a given Model and a CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasCategorySpec> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.CategorySpec target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasCategorySpec> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasCategorySpec>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasCategorySpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasCategorySpec>(source, global::Empresa.MoneyManagerModel.ModelHasCategorySpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasCategorySpec link in links )
			{
				if ( target.Equals(link.CategorySpec) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasCategorySpec link between a given Modeland a CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasCategorySpec GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.CategorySpec target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasCategorySpec> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasCategorySpec>(source, global::Empresa.MoneyManagerModel.ModelHasCategorySpec.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasCategorySpec link in links )
			{
				if ( target.Equals(link.CategorySpec) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship CategoryAttributeReferencesAttributeType1
	/// Description for
	/// Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("3e04be3d-a61d-4bd2-87ca-7402a38e28fb")]
	public partial class CategoryAttributeReferencesAttributeType1 : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CategoryAttributeReferencesAttributeType1 domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3e04be3d, 0xa61d, 0x4bd2, 0x87, 0xca, 0x74, 0x02, 0xa3, 0x8e, 0x28, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CategoryAttributeReferencesAttributeType1 link in the same Partition as the given CategoryAttribute
		/// </summary>
		/// <param name="source">CategoryAttribute to use as the source of the relationship.</param>
		/// <param name="target">AttributeType to use as the target of the relationship.</param>
		public CategoryAttributeReferencesAttributeType1(CategoryAttribute source, AttributeType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CategoryAttributeReferencesAttributeType1.CategoryAttributeDomainRoleId, source), new DslModeling::RoleAssignment(CategoryAttributeReferencesAttributeType1.AttributeTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CategoryAttributeReferencesAttributeType1(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CategoryAttributeReferencesAttributeType1(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CategoryAttributeReferencesAttributeType1(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CategoryAttributeReferencesAttributeType1(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CategoryAttribute domain role code
		
		/// <summary>
		/// CategoryAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid CategoryAttributeDomainRoleId = new global::System.Guid(0x1b3d70aa, 0x863f, 0x4108, 0x9d, 0x13, 0x8b, 0x70, 0x49, 0x41, 0x8f, 0x3e);
		
		/// <summary>
		/// DomainRole CategoryAttribute
		/// Description for
		/// Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1.CategoryAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1/CategoryAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1/CategoryAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AttributeType1", PropertyDisplayNameKey="Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1/CategoryAttribute.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1b3d70aa-863f-4108-9d13-8b7049418f3e")]
		public virtual CategoryAttribute CategoryAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CategoryAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, CategoryAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CategoryAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CategoryAttribute1 of a AttributeType
		/// <summary>
		/// Gets CategoryAttribute1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CategoryAttribute GetCategoryAttribute1(AttributeType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeTypeDomainRoleId) as CategoryAttribute;
		}
		
		/// <summary>
		/// Sets CategoryAttribute1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCategoryAttribute1(AttributeType element, CategoryAttribute newCategoryAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeTypeDomainRoleId, newCategoryAttribute);
		}
		#endregion
		#region AttributeType domain role code
		
		/// <summary>
		/// AttributeType domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeTypeDomainRoleId = new global::System.Guid(0x12f4979a, 0xcfde, 0x4bbe, 0xab, 0x64, 0xd4, 0x72, 0x15, 0xb9, 0x3b, 0x5a);
		
		/// <summary>
		/// DomainRole AttributeType
		/// Description for
		/// Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1.AttributeType
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1/AttributeType.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1/AttributeType.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CategoryAttribute1", PropertyDisplayNameKey="Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1/AttributeType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("12f4979a-cfde-4bbe-ab64-d47215b93b5a")]
		public virtual AttributeType AttributeType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AttributeType)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AttributeType1 of a CategoryAttribute
		/// <summary>
		/// Gets AttributeType1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AttributeType GetAttributeType1(CategoryAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CategoryAttributeDomainRoleId) as AttributeType;
		}
		
		/// <summary>
		/// Sets AttributeType1.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAttributeType1(CategoryAttribute element, AttributeType newAttributeType)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CategoryAttributeDomainRoleId, newAttributeType);
		}
		#endregion
		#region CategoryAttribute link accessor
		/// <summary>
		/// Get the CategoryAttributeReferencesAttributeType1 link to a CategoryAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1 GetLinkToAttributeType1 (global::Empresa.MoneyManagerModel.CategoryAttribute categoryAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1>(categoryAttributeInstance, global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1.CategoryAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CategoryAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AttributeType link accessor
		/// <summary>
		/// Get the CategoryAttributeReferencesAttributeType1 link to a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1 GetLinkToCategoryAttribute1 (global::Empresa.MoneyManagerModel.AttributeType attributeTypeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1>(attributeTypeInstance, global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1.AttributeTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AttributeType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CategoryAttributeReferencesAttributeType1 instance accessors
		
		/// <summary>
		/// Get any CategoryAttributeReferencesAttributeType1 links between a given CategoryAttribute and a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1> GetLinks( global::Empresa.MoneyManagerModel.CategoryAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1>(source, global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1.CategoryAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1 link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CategoryAttributeReferencesAttributeType1 link between a given CategoryAttributeand a AttributeType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1 GetLink( global::Empresa.MoneyManagerModel.CategoryAttribute source, global::Empresa.MoneyManagerModel.AttributeType target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1>(source, global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1.CategoryAttributeDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.CategoryAttributeReferencesAttributeType1 link in links )
			{
				if ( target.Equals(link.AttributeType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship CategorySpecHasCategoryAttribute
	/// Description for Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("532da53a-eefd-43db-ac78-44eee34ba305")]
	public partial class CategorySpecHasCategoryAttribute : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CategorySpecHasCategoryAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x532da53a, 0xeefd, 0x43db, 0xac, 0x78, 0x44, 0xee, 0xe3, 0x4b, 0xa3, 0x05);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CategorySpecHasCategoryAttribute link in the same Partition as the given CategorySpec
		/// </summary>
		/// <param name="source">CategorySpec to use as the source of the relationship.</param>
		/// <param name="target">CategoryAttribute to use as the target of the relationship.</param>
		public CategorySpecHasCategoryAttribute(CategorySpec source, CategoryAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CategorySpecHasCategoryAttribute.CategorySpecDomainRoleId, source), new DslModeling::RoleAssignment(CategorySpecHasCategoryAttribute.CategoryAttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CategorySpecHasCategoryAttribute(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CategorySpecHasCategoryAttribute(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CategorySpecHasCategoryAttribute(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CategorySpecHasCategoryAttribute(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CategorySpec domain role code
		
		/// <summary>
		/// CategorySpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid CategorySpecDomainRoleId = new global::System.Guid(0x8cfe4cd6, 0x1264, 0x4981, 0x8d, 0x61, 0xd3, 0x92, 0x6c, 0xd4, 0x79, 0x10);
		
		/// <summary>
		/// DomainRole CategorySpec
		/// Description for
		/// Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.CategorySpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute/CategorySpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute/CategorySpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CategoryAttribute", PropertyDisplayNameKey="Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute/CategorySpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8cfe4cd6-1264-4981-8d61-d3926cd47910")]
		public virtual CategorySpec CategorySpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CategorySpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, CategorySpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CategorySpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CategorySpec of a CategoryAttribute
		/// <summary>
		/// Gets CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CategorySpec GetCategorySpec(CategoryAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CategoryAttributeDomainRoleId) as CategorySpec;
		}
		
		/// <summary>
		/// Sets CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCategorySpec(CategoryAttribute element, CategorySpec newCategorySpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CategoryAttributeDomainRoleId, newCategorySpec);
		}
		#endregion
		#region CategoryAttribute domain role code
		
		/// <summary>
		/// CategoryAttribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid CategoryAttributeDomainRoleId = new global::System.Guid(0xef2d7540, 0xbf42, 0x474d, 0x9d, 0x5a, 0x5d, 0x43, 0xdf, 0x94, 0xe8, 0x09);
		
		/// <summary>
		/// DomainRole CategoryAttribute
		/// Description for
		/// Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.CategoryAttribute
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute/CategoryAttribute.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute/CategoryAttribute.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CategorySpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute/CategoryAttribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ef2d7540-bf42-474d-9d5a-5d43df94e809")]
		public virtual CategoryAttribute CategoryAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CategoryAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, CategoryAttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CategoryAttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CategoryAttribute of a CategorySpec
		/// <summary>
		/// Gets CategoryAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CategoryAttribute GetCategoryAttribute(CategorySpec element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CategorySpecDomainRoleId) as CategoryAttribute;
		}
		
		/// <summary>
		/// Sets CategoryAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCategoryAttribute(CategorySpec element, CategoryAttribute newCategoryAttribute)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CategorySpecDomainRoleId, newCategoryAttribute);
		}
		#endregion
		#region CategorySpec link accessor
		/// <summary>
		/// Get the CategorySpecHasCategoryAttribute link to a CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute GetLinkToCategoryAttribute (global::Empresa.MoneyManagerModel.CategorySpec categorySpecInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute>(categorySpecInstance, global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.CategorySpecDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CategorySpec not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CategoryAttribute link accessor
		/// <summary>
		/// Get the CategorySpecHasCategoryAttribute link to a CategoryAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute GetLinkToCategorySpec (global::Empresa.MoneyManagerModel.CategoryAttribute categoryAttributeInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute>(categoryAttributeInstance, global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.CategoryAttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CategoryAttribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CategorySpecHasCategoryAttribute instance accessors
		
		/// <summary>
		/// Get any CategorySpecHasCategoryAttribute links between a given CategorySpec and a CategoryAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute> GetLinks( global::Empresa.MoneyManagerModel.CategorySpec source, global::Empresa.MoneyManagerModel.CategoryAttribute target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute>(source, global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.CategorySpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute link in links )
			{
				if ( target.Equals(link.CategoryAttribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CategorySpecHasCategoryAttribute link between a given CategorySpecand a CategoryAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute GetLink( global::Empresa.MoneyManagerModel.CategorySpec source, global::Empresa.MoneyManagerModel.CategoryAttribute target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute>(source, global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.CategorySpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute link in links )
			{
				if ( target.Equals(link.CategoryAttribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship UserSpecReferencesUserAccountAssociation
	/// Description for
	/// Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a1a93c3a-e30b-4042-9d83-8c781d4a9f6d")]
	public partial class UserSpecReferencesUserAccountAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UserSpecReferencesUserAccountAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa1a93c3a, 0xe30b, 0x4042, 0x9d, 0x83, 0x8c, 0x78, 0x1d, 0x4a, 0x9f, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UserSpecReferencesUserAccountAssociation link in the same Partition as the given UserSpec
		/// </summary>
		/// <param name="source">UserSpec to use as the source of the relationship.</param>
		/// <param name="target">UserAccountAssociation to use as the target of the relationship.</param>
		public UserSpecReferencesUserAccountAssociation(UserSpec source, UserAccountAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UserSpecReferencesUserAccountAssociation.UserSpecDomainRoleId, source), new DslModeling::RoleAssignment(UserSpecReferencesUserAccountAssociation.UserAccountAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserSpecReferencesUserAccountAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserSpecReferencesUserAccountAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UserSpecReferencesUserAccountAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UserSpecReferencesUserAccountAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UserSpec domain role code
		
		/// <summary>
		/// UserSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserSpecDomainRoleId = new global::System.Guid(0xe14d30bc, 0xb90e, 0x497f, 0x99, 0xfe, 0x84, 0x9d, 0x4e, 0xab, 0x56, 0x73);
		
		/// <summary>
		/// DomainRole UserSpec
		/// Description for
		/// Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation.UserSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation/UserSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation/UserSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UserAccountAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation/UserSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e14d30bc-b90e-497f-99fe-849d4eab5673")]
		public virtual UserSpec UserSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserSpec of a UserAccountAssociation
		/// <summary>
		/// Gets UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static UserSpec GetUserSpec(UserAccountAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserAccountAssociationDomainRoleId) as UserSpec;
		}
		
		/// <summary>
		/// Sets UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetUserSpec(UserAccountAssociation element, UserSpec newUserSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserAccountAssociationDomainRoleId, newUserSpec);
		}
		#endregion
		#region UserAccountAssociation domain role code
		
		/// <summary>
		/// UserAccountAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserAccountAssociationDomainRoleId = new global::System.Guid(0x03029638, 0xb9fc, 0x486a, 0x86, 0x12, 0x91, 0x66, 0x66, 0x68, 0x7b, 0x8a);
		
		/// <summary>
		/// DomainRole UserAccountAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation.UserAccountAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation/UserAccountAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation/UserAccountAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UserSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation/UserAccountAssociation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("03029638-b9fc-486a-8612-916666687b8a")]
		public virtual UserAccountAssociation UserAccountAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserAccountAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserAccountAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserAccountAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserAccountAssociation of a UserSpec
		/// <summary>
		/// Gets a list of UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UserAccountAssociation> GetUserAccountAssociation(UserSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UserAccountAssociation>, UserAccountAssociation>(element, UserSpecDomainRoleId);
		}
		#endregion
		#region UserSpec link accessor
		/// <summary>
		/// Get the list of UserSpecReferencesUserAccountAssociation links to a UserSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation> GetLinksToUserAccountAssociation ( global::Empresa.MoneyManagerModel.UserSpec userSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation>(userSpecInstance, global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation.UserSpecDomainRoleId);
		}
		#endregion
		#region UserAccountAssociation link accessor
		/// <summary>
		/// Get the UserSpecReferencesUserAccountAssociation link to a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation GetLinkToUserSpec (global::Empresa.MoneyManagerModel.UserAccountAssociation userAccountAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation>(userAccountAssociationInstance, global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation.UserAccountAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UserAccountAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region UserSpecReferencesUserAccountAssociation instance accessors
		
		/// <summary>
		/// Get any UserSpecReferencesUserAccountAssociation links between a given UserSpec and a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation> GetLinks( global::Empresa.MoneyManagerModel.UserSpec source, global::Empresa.MoneyManagerModel.UserAccountAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation>(source, global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation.UserSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation link in links )
			{
				if ( target.Equals(link.UserAccountAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one UserSpecReferencesUserAccountAssociation link between a given UserSpecand a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation GetLink( global::Empresa.MoneyManagerModel.UserSpec source, global::Empresa.MoneyManagerModel.UserAccountAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation>(source, global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation.UserSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.UserSpecReferencesUserAccountAssociation link in links )
			{
				if ( target.Equals(link.UserAccountAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AccountSpecReferencesUserAccountAssociation
	/// Description for
	/// Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("e04bdff6-6651-441d-9bbe-c852b0778434")]
	public partial class AccountSpecReferencesUserAccountAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AccountSpecReferencesUserAccountAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe04bdff6, 0x6651, 0x441d, 0x9b, 0xbe, 0xc8, 0x52, 0xb0, 0x77, 0x84, 0x34);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AccountSpecReferencesUserAccountAssociation link in the same Partition as the given AccountSpec
		/// </summary>
		/// <param name="source">AccountSpec to use as the source of the relationship.</param>
		/// <param name="target">UserAccountAssociation to use as the target of the relationship.</param>
		public AccountSpecReferencesUserAccountAssociation(AccountSpec source, UserAccountAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AccountSpecReferencesUserAccountAssociation.AccountSpecDomainRoleId, source), new DslModeling::RoleAssignment(AccountSpecReferencesUserAccountAssociation.UserAccountAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecReferencesUserAccountAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecReferencesUserAccountAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecReferencesUserAccountAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecReferencesUserAccountAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0xa0ac3676, 0x4db0, 0x4d5a, 0x94, 0x04, 0xe1, 0x83, 0xd6, 0x20, 0xa7, 0xb8);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Description for
		/// Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UserAccountAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation/AccountSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a0ac3676-4db0-4d5a-9404-e183d620a7b8")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpec of a UserAccountAssociation
		/// <summary>
		/// Gets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountSpec GetAccountSpec(UserAccountAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, UserAccountAssociationDomainRoleId) as AccountSpec;
		}
		
		/// <summary>
		/// Sets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountSpec(UserAccountAssociation element, AccountSpec newAccountSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, UserAccountAssociationDomainRoleId, newAccountSpec);
		}
		#endregion
		#region UserAccountAssociation domain role code
		
		/// <summary>
		/// UserAccountAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid UserAccountAssociationDomainRoleId = new global::System.Guid(0xd5bd2829, 0xcaba, 0x4079, 0x89, 0x9e, 0x98, 0xd4, 0x6a, 0x53, 0x47, 0xd3);
		
		/// <summary>
		/// DomainRole UserAccountAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation.UserAccountAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation/UserAccountAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation/UserAccountAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AccountSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation/UserAccountAssociation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d5bd2829-caba-4079-899e-98d46a5347d3")]
		public virtual UserAccountAssociation UserAccountAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (UserAccountAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, UserAccountAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UserAccountAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UserAccountAssociation of a AccountSpec
		/// <summary>
		/// Gets a list of UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<UserAccountAssociation> GetUserAccountAssociation(AccountSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<UserAccountAssociation>, UserAccountAssociation>(element, AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the list of AccountSpecReferencesUserAccountAssociation links to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation> GetLinksToUserAccountAssociation ( global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation>(accountSpecInstance, global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation.AccountSpecDomainRoleId);
		}
		#endregion
		#region UserAccountAssociation link accessor
		/// <summary>
		/// Get the AccountSpecReferencesUserAccountAssociation link to a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation GetLinkToAccountSpec (global::Empresa.MoneyManagerModel.UserAccountAssociation userAccountAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation>(userAccountAssociationInstance, global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation.UserAccountAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of UserAccountAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountSpecReferencesUserAccountAssociation instance accessors
		
		/// <summary>
		/// Get any AccountSpecReferencesUserAccountAssociation links between a given AccountSpec and a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation> GetLinks( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.UserAccountAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation>(source, global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation link in links )
			{
				if ( target.Equals(link.UserAccountAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AccountSpecReferencesUserAccountAssociation link between a given AccountSpecand a UserAccountAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation GetLink( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.UserAccountAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation>(source, global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecReferencesUserAccountAssociation link in links )
			{
				if ( target.Equals(link.UserAccountAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship AccountSpecReferencesAccountTransactionAssociation
	/// Description for
	/// Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("9689c1fa-aa4a-4b29-9f43-a032b09838dd")]
	public partial class AccountSpecReferencesAccountTransactionAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AccountSpecReferencesAccountTransactionAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9689c1fa, 0xaa4a, 0x4b29, 0x9f, 0x43, 0xa0, 0x32, 0xb0, 0x98, 0x38, 0xdd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AccountSpecReferencesAccountTransactionAssociation link in the same Partition as the given AccountSpec
		/// </summary>
		/// <param name="source">AccountSpec to use as the source of the relationship.</param>
		/// <param name="target">AccountTransactionAssociation to use as the target of the relationship.</param>
		public AccountSpecReferencesAccountTransactionAssociation(AccountSpec source, AccountTransactionAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AccountSpecReferencesAccountTransactionAssociation.AccountSpecDomainRoleId, source), new DslModeling::RoleAssignment(AccountSpecReferencesAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecReferencesAccountTransactionAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecReferencesAccountTransactionAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AccountSpecReferencesAccountTransactionAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AccountSpecReferencesAccountTransactionAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AccountSpec domain role code
		
		/// <summary>
		/// AccountSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountSpecDomainRoleId = new global::System.Guid(0xeebc9430, 0x316e, 0x4023, 0x82, 0x70, 0x2a, 0x67, 0xbb, 0xc4, 0x72, 0xc7);
		
		/// <summary>
		/// DomainRole AccountSpec
		/// Description for
		/// Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation.AccountSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation/AccountSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation/AccountSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountTransactionAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation/AccountSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("eebc9430-316e-4023-8270-2a67bbc472c7")]
		public virtual AccountSpec AccountSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountSpec of a AccountTransactionAssociation
		/// <summary>
		/// Gets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AccountSpec GetAccountSpec(AccountTransactionAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountTransactionAssociationDomainRoleId) as AccountSpec;
		}
		
		/// <summary>
		/// Sets AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAccountSpec(AccountTransactionAssociation element, AccountSpec newAccountSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountTransactionAssociationDomainRoleId, newAccountSpec);
		}
		#endregion
		#region AccountTransactionAssociation domain role code
		
		/// <summary>
		/// AccountTransactionAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountTransactionAssociationDomainRoleId = new global::System.Guid(0xc8f50b41, 0x3ac5, 0x4082, 0xa7, 0x70, 0x6a, 0x42, 0x05, 0x54, 0xfb, 0xd9);
		
		/// <summary>
		/// DomainRole AccountTransactionAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation.AccountTransactionAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation/AccountTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation/AccountTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AccountSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation/AccountTransactionAssociation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c8f50b41-3ac5-4082-a770-6a420554fbd9")]
		public virtual AccountTransactionAssociation AccountTransactionAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountTransactionAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountTransactionAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountTransactionAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountTransactionAssociation of a AccountSpec
		/// <summary>
		/// Gets a list of AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountTransactionAssociation> GetAccountTransactionAssociation(AccountSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountTransactionAssociation>, AccountTransactionAssociation>(element, AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountSpec link accessor
		/// <summary>
		/// Get the list of AccountSpecReferencesAccountTransactionAssociation links to a AccountSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation> GetLinksToAccountTransactionAssociation ( global::Empresa.MoneyManagerModel.AccountSpec accountSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation>(accountSpecInstance, global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation.AccountSpecDomainRoleId);
		}
		#endregion
		#region AccountTransactionAssociation link accessor
		/// <summary>
		/// Get the AccountSpecReferencesAccountTransactionAssociation link to a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation GetLinkToAccountSpec (global::Empresa.MoneyManagerModel.AccountTransactionAssociation accountTransactionAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation>(accountTransactionAssociationInstance, global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountTransactionAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AccountSpecReferencesAccountTransactionAssociation instance accessors
		
		/// <summary>
		/// Get any AccountSpecReferencesAccountTransactionAssociation links between a given AccountSpec and a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation> GetLinks( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.AccountTransactionAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation>(source, global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation link in links )
			{
				if ( target.Equals(link.AccountTransactionAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AccountSpecReferencesAccountTransactionAssociation link between a given AccountSpecand a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation GetLink( global::Empresa.MoneyManagerModel.AccountSpec source, global::Empresa.MoneyManagerModel.AccountTransactionAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation>(source, global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation.AccountSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.AccountSpecReferencesAccountTransactionAssociation link in links )
			{
				if ( target.Equals(link.AccountTransactionAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship TransactionSpecReferencesAccountTransactionAssociation
	/// Description for
	/// Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("204530af-12c9-4a89-a396-f43fb4b0c981")]
	public partial class TransactionSpecReferencesAccountTransactionAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionSpecReferencesAccountTransactionAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x204530af, 0x12c9, 0x4a89, 0xa3, 0x96, 0xf4, 0x3f, 0xb4, 0xb0, 0xc9, 0x81);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionSpecReferencesAccountTransactionAssociation link in the same Partition as the given TransactionSpec
		/// </summary>
		/// <param name="source">TransactionSpec to use as the source of the relationship.</param>
		/// <param name="target">AccountTransactionAssociation to use as the target of the relationship.</param>
		public TransactionSpecReferencesAccountTransactionAssociation(TransactionSpec source, AccountTransactionAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionSpecReferencesAccountTransactionAssociation.TransactionSpecDomainRoleId, source), new DslModeling::RoleAssignment(TransactionSpecReferencesAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecReferencesAccountTransactionAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecReferencesAccountTransactionAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecReferencesAccountTransactionAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecReferencesAccountTransactionAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionSpec domain role code
		
		/// <summary>
		/// TransactionSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSpecDomainRoleId = new global::System.Guid(0xa7e67384, 0xbcfe, 0x4532, 0x9b, 0xaa, 0x7a, 0x4a, 0x12, 0x08, 0x0d, 0xae);
		
		/// <summary>
		/// DomainRole TransactionSpec
		/// Description for
		/// Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation.TransactionSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation/TransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation/TransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AccountTransactionAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation/TransactionSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a7e67384-bcfe-4532-9baa-7a4a12080dae")]
		public virtual TransactionSpec TransactionSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSpec of a AccountTransactionAssociation
		/// <summary>
		/// Gets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionSpec GetTransactionSpec(AccountTransactionAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AccountTransactionAssociationDomainRoleId) as TransactionSpec;
		}
		
		/// <summary>
		/// Sets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionSpec(AccountTransactionAssociation element, TransactionSpec newTransactionSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AccountTransactionAssociationDomainRoleId, newTransactionSpec);
		}
		#endregion
		#region AccountTransactionAssociation domain role code
		
		/// <summary>
		/// AccountTransactionAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid AccountTransactionAssociationDomainRoleId = new global::System.Guid(0xe0728564, 0x4fcb, 0x4e66, 0xb3, 0xa3, 0x0f, 0xdc, 0x97, 0x12, 0xe3, 0xce);
		
		/// <summary>
		/// DomainRole AccountTransactionAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation.AccountTransactionAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation/AccountTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation/AccountTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation/AccountTransactionAssociation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e0728564-4fcb-4e66-b3a3-0fdc9712e3ce")]
		public virtual AccountTransactionAssociation AccountTransactionAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AccountTransactionAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, AccountTransactionAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AccountTransactionAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AccountTransactionAssociation of a TransactionSpec
		/// <summary>
		/// Gets a list of AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AccountTransactionAssociation> GetAccountTransactionAssociation(TransactionSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AccountTransactionAssociation>, AccountTransactionAssociation>(element, TransactionSpecDomainRoleId);
		}
		#endregion
		#region TransactionSpec link accessor
		/// <summary>
		/// Get the list of TransactionSpecReferencesAccountTransactionAssociation links to a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation> GetLinksToAccountTransactionAssociation ( global::Empresa.MoneyManagerModel.TransactionSpec transactionSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation>(transactionSpecInstance, global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation.TransactionSpecDomainRoleId);
		}
		#endregion
		#region AccountTransactionAssociation link accessor
		/// <summary>
		/// Get the TransactionSpecReferencesAccountTransactionAssociation link to a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation GetLinkToTransactionSpec (global::Empresa.MoneyManagerModel.AccountTransactionAssociation accountTransactionAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation>(accountTransactionAssociationInstance, global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AccountTransactionAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionSpecReferencesAccountTransactionAssociation instance accessors
		
		/// <summary>
		/// Get any TransactionSpecReferencesAccountTransactionAssociation links between a given TransactionSpec and a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation> GetLinks( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.AccountTransactionAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation>(source, global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation link in links )
			{
				if ( target.Equals(link.AccountTransactionAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionSpecReferencesAccountTransactionAssociation link between a given TransactionSpecand a AccountTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation GetLink( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.AccountTransactionAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation>(source, global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecReferencesAccountTransactionAssociation link in links )
			{
				if ( target.Equals(link.AccountTransactionAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship ModelHasCategoryTransactionAssociation
	/// Description for Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3bd00fec-d312-4548-8166-28384c1b8007")]
	public partial class ModelHasCategoryTransactionAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelHasCategoryTransactionAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3bd00fec, 0xd312, 0x4548, 0x81, 0x66, 0x28, 0x38, 0x4c, 0x1b, 0x80, 0x07);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelHasCategoryTransactionAssociation link in the same Partition as the given Model
		/// </summary>
		/// <param name="source">Model to use as the source of the relationship.</param>
		/// <param name="target">CategoryTransactionAssociation to use as the target of the relationship.</param>
		public ModelHasCategoryTransactionAssociation(Model source, CategoryTransactionAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelHasCategoryTransactionAssociation.ModelDomainRoleId, source), new DslModeling::RoleAssignment(ModelHasCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasCategoryTransactionAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasCategoryTransactionAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelHasCategoryTransactionAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelHasCategoryTransactionAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Model domain role code
		
		/// <summary>
		/// Model domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelDomainRoleId = new global::System.Guid(0x0a9b3567, 0x41b2, 0x465c, 0xb8, 0x19, 0xcb, 0xf1, 0xb7, 0x42, 0x3e, 0xe3);
		
		/// <summary>
		/// DomainRole Model
		/// Description for
		/// Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.Model
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation/Model.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation/Model.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CategoryTransactionAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation/Model.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0a9b3567-41b2-465c-b819-cbf1b7423ee3")]
		public virtual Model Model
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Model)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Model of a CategoryTransactionAssociation
		/// <summary>
		/// Gets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Model GetModel(CategoryTransactionAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CategoryTransactionAssociationDomainRoleId) as Model;
		}
		
		/// <summary>
		/// Sets Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModel(CategoryTransactionAssociation element, Model newModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CategoryTransactionAssociationDomainRoleId, newModel);
		}
		#endregion
		#region CategoryTransactionAssociation domain role code
		
		/// <summary>
		/// CategoryTransactionAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid CategoryTransactionAssociationDomainRoleId = new global::System.Guid(0x121d68c5, 0x17e0, 0x4106, 0x91, 0x49, 0xa6, 0x70, 0xeb, 0x78, 0x1b, 0x59);
		
		/// <summary>
		/// DomainRole CategoryTransactionAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.CategoryTransactionAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation/CategoryTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation/CategoryTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Model", PropertyDisplayNameKey="Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation/CategoryTransactionAssociation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("121d68c5-17e0-4106-9149-a670eb781b59")]
		public virtual CategoryTransactionAssociation CategoryTransactionAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CategoryTransactionAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, CategoryTransactionAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CategoryTransactionAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CategoryTransactionAssociation of a Model
		/// <summary>
		/// Gets a list of CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CategoryTransactionAssociation> GetCategoryTransactionAssociation(Model element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CategoryTransactionAssociation>, CategoryTransactionAssociation>(element, ModelDomainRoleId);
		}
		#endregion
		#region Model link accessor
		/// <summary>
		/// Get the list of ModelHasCategoryTransactionAssociation links to a Model.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation> GetLinksToCategoryTransactionAssociation ( global::Empresa.MoneyManagerModel.Model modelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation>(modelInstance, global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.ModelDomainRoleId);
		}
		#endregion
		#region CategoryTransactionAssociation link accessor
		/// <summary>
		/// Get the ModelHasCategoryTransactionAssociation link to a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation GetLinkToModel (global::Empresa.MoneyManagerModel.CategoryTransactionAssociation categoryTransactionAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation>(categoryTransactionAssociationInstance, global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CategoryTransactionAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelHasCategoryTransactionAssociation instance accessors
		
		/// <summary>
		/// Get any ModelHasCategoryTransactionAssociation links between a given Model and a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation> GetLinks( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.CategoryTransactionAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation>(source, global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation link in links )
			{
				if ( target.Equals(link.CategoryTransactionAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelHasCategoryTransactionAssociation link between a given Modeland a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation GetLink( global::Empresa.MoneyManagerModel.Model source, global::Empresa.MoneyManagerModel.CategoryTransactionAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation>(source, global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.ModelDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation link in links )
			{
				if ( target.Equals(link.CategoryTransactionAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship CategorySpecReferencesCategoryTransactionAssociation
	/// Description for
	/// Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("63903078-5e7c-4c29-9dd6-fc5ccee17f13")]
	public partial class CategorySpecReferencesCategoryTransactionAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CategorySpecReferencesCategoryTransactionAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63903078, 0x5e7c, 0x4c29, 0x9d, 0xd6, 0xfc, 0x5c, 0xce, 0xe1, 0x7f, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CategorySpecReferencesCategoryTransactionAssociation link in the same Partition as the given CategorySpec
		/// </summary>
		/// <param name="source">CategorySpec to use as the source of the relationship.</param>
		/// <param name="target">CategoryTransactionAssociation to use as the target of the relationship.</param>
		public CategorySpecReferencesCategoryTransactionAssociation(CategorySpec source, CategoryTransactionAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CategorySpecReferencesCategoryTransactionAssociation.CategorySpecDomainRoleId, source), new DslModeling::RoleAssignment(CategorySpecReferencesCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CategorySpecReferencesCategoryTransactionAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CategorySpecReferencesCategoryTransactionAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CategorySpecReferencesCategoryTransactionAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CategorySpecReferencesCategoryTransactionAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CategorySpec domain role code
		
		/// <summary>
		/// CategorySpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid CategorySpecDomainRoleId = new global::System.Guid(0x1cc04004, 0xb5e0, 0x475f, 0x9d, 0x05, 0xc1, 0x6c, 0x44, 0x49, 0x1c, 0x67);
		
		/// <summary>
		/// DomainRole CategorySpec
		/// Description for
		/// Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation.CategorySpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation/CategorySpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation/CategorySpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CategoryTransactionAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation/CategorySpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1cc04004-b5e0-475f-9d05-c16c44491c67")]
		public virtual CategorySpec CategorySpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CategorySpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, CategorySpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CategorySpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CategorySpec of a CategoryTransactionAssociation
		/// <summary>
		/// Gets CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CategorySpec GetCategorySpec(CategoryTransactionAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CategoryTransactionAssociationDomainRoleId) as CategorySpec;
		}
		
		/// <summary>
		/// Sets CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCategorySpec(CategoryTransactionAssociation element, CategorySpec newCategorySpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CategoryTransactionAssociationDomainRoleId, newCategorySpec);
		}
		#endregion
		#region CategoryTransactionAssociation domain role code
		
		/// <summary>
		/// CategoryTransactionAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid CategoryTransactionAssociationDomainRoleId = new global::System.Guid(0x975be051, 0x15db, 0x4296, 0xa4, 0x33, 0x64, 0x87, 0x0f, 0x61, 0xf9, 0x68);
		
		/// <summary>
		/// DomainRole CategoryTransactionAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation.CategoryTransactionAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation/CategoryTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation/CategoryTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CategorySpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation/CategoryTransactionAssociation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("975be051-15db-4296-a433-64870f61f968")]
		public virtual CategoryTransactionAssociation CategoryTransactionAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CategoryTransactionAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, CategoryTransactionAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CategoryTransactionAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CategoryTransactionAssociation of a CategorySpec
		/// <summary>
		/// Gets a list of CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CategoryTransactionAssociation> GetCategoryTransactionAssociation(CategorySpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CategoryTransactionAssociation>, CategoryTransactionAssociation>(element, CategorySpecDomainRoleId);
		}
		#endregion
		#region CategorySpec link accessor
		/// <summary>
		/// Get the list of CategorySpecReferencesCategoryTransactionAssociation links to a CategorySpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation> GetLinksToCategoryTransactionAssociation ( global::Empresa.MoneyManagerModel.CategorySpec categorySpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation>(categorySpecInstance, global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation.CategorySpecDomainRoleId);
		}
		#endregion
		#region CategoryTransactionAssociation link accessor
		/// <summary>
		/// Get the CategorySpecReferencesCategoryTransactionAssociation link to a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation GetLinkToCategorySpec (global::Empresa.MoneyManagerModel.CategoryTransactionAssociation categoryTransactionAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation>(categoryTransactionAssociationInstance, global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CategoryTransactionAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CategorySpecReferencesCategoryTransactionAssociation instance accessors
		
		/// <summary>
		/// Get any CategorySpecReferencesCategoryTransactionAssociation links between a given CategorySpec and a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation> GetLinks( global::Empresa.MoneyManagerModel.CategorySpec source, global::Empresa.MoneyManagerModel.CategoryTransactionAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation>(source, global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation.CategorySpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation link in links )
			{
				if ( target.Equals(link.CategoryTransactionAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CategorySpecReferencesCategoryTransactionAssociation link between a given CategorySpecand a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation GetLink( global::Empresa.MoneyManagerModel.CategorySpec source, global::Empresa.MoneyManagerModel.CategoryTransactionAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation>(source, global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation.CategorySpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.CategorySpecReferencesCategoryTransactionAssociation link in links )
			{
				if ( target.Equals(link.CategoryTransactionAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainRelationship TransactionSpecReferencesCategoryTransactionAssociation
	/// Description for
	/// Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fe74993f-b882-4d69-95c5-d93d7fcb5ed6")]
	public partial class TransactionSpecReferencesCategoryTransactionAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TransactionSpecReferencesCategoryTransactionAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfe74993f, 0xb882, 0x4d69, 0x95, 0xc5, 0xd9, 0x3d, 0x7f, 0xcb, 0x5e, 0xd6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TransactionSpecReferencesCategoryTransactionAssociation link in the same Partition as the given TransactionSpec
		/// </summary>
		/// <param name="source">TransactionSpec to use as the source of the relationship.</param>
		/// <param name="target">CategoryTransactionAssociation to use as the target of the relationship.</param>
		public TransactionSpecReferencesCategoryTransactionAssociation(TransactionSpec source, CategoryTransactionAssociation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TransactionSpecReferencesCategoryTransactionAssociation.TransactionSpecDomainRoleId, source), new DslModeling::RoleAssignment(TransactionSpecReferencesCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecReferencesCategoryTransactionAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecReferencesCategoryTransactionAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TransactionSpecReferencesCategoryTransactionAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TransactionSpecReferencesCategoryTransactionAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TransactionSpec domain role code
		
		/// <summary>
		/// TransactionSpec domain role Id.
		/// </summary>
		public static readonly global::System.Guid TransactionSpecDomainRoleId = new global::System.Guid(0x2a443f39, 0xa5fa, 0x4384, 0x88, 0x9f, 0x95, 0x4d, 0xfa, 0x71, 0x1d, 0x25);
		
		/// <summary>
		/// DomainRole TransactionSpec
		/// Description for
		/// Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation.TransactionSpec
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation/TransactionSpec.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation/TransactionSpec.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CategoryTransactionAssociation", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation/TransactionSpec.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2a443f39-a5fa-4384-889f-954dfa711d25")]
		public virtual TransactionSpec TransactionSpec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TransactionSpec)DslModeling::DomainRoleInfo.GetRolePlayer(this, TransactionSpecDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TransactionSpecDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TransactionSpec of a CategoryTransactionAssociation
		/// <summary>
		/// Gets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static TransactionSpec GetTransactionSpec(CategoryTransactionAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CategoryTransactionAssociationDomainRoleId) as TransactionSpec;
		}
		
		/// <summary>
		/// Sets TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTransactionSpec(CategoryTransactionAssociation element, TransactionSpec newTransactionSpec)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CategoryTransactionAssociationDomainRoleId, newTransactionSpec);
		}
		#endregion
		#region CategoryTransactionAssociation domain role code
		
		/// <summary>
		/// CategoryTransactionAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid CategoryTransactionAssociationDomainRoleId = new global::System.Guid(0xd5e63cab, 0x8161, 0x4e52, 0x98, 0x26, 0xac, 0x9b, 0xed, 0x7c, 0xbf, 0x78);
		
		/// <summary>
		/// DomainRole CategoryTransactionAssociation
		/// Description for
		/// Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation.CategoryTransactionAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation/CategoryTransactionAssociation.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation/CategoryTransactionAssociation.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TransactionSpec", PropertyDisplayNameKey="Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation/CategoryTransactionAssociation.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d5e63cab-8161-4e52-9826-ac9bed7cbf78")]
		public virtual CategoryTransactionAssociation CategoryTransactionAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CategoryTransactionAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, CategoryTransactionAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CategoryTransactionAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CategoryTransactionAssociation of a TransactionSpec
		/// <summary>
		/// Gets a list of CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CategoryTransactionAssociation> GetCategoryTransactionAssociation(TransactionSpec element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CategoryTransactionAssociation>, CategoryTransactionAssociation>(element, TransactionSpecDomainRoleId);
		}
		#endregion
		#region TransactionSpec link accessor
		/// <summary>
		/// Get the list of TransactionSpecReferencesCategoryTransactionAssociation links to a TransactionSpec.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation> GetLinksToCategoryTransactionAssociation ( global::Empresa.MoneyManagerModel.TransactionSpec transactionSpecInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation>(transactionSpecInstance, global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation.TransactionSpecDomainRoleId);
		}
		#endregion
		#region CategoryTransactionAssociation link accessor
		/// <summary>
		/// Get the TransactionSpecReferencesCategoryTransactionAssociation link to a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation GetLinkToTransactionSpec (global::Empresa.MoneyManagerModel.CategoryTransactionAssociation categoryTransactionAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation>(categoryTransactionAssociationInstance, global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CategoryTransactionAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TransactionSpecReferencesCategoryTransactionAssociation instance accessors
		
		/// <summary>
		/// Get any TransactionSpecReferencesCategoryTransactionAssociation links between a given TransactionSpec and a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation> GetLinks( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.CategoryTransactionAssociation target )
		{
			global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation> outLinks = new global::System.Collections.Generic.List<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation>();
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation>(source, global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation link in links )
			{
				if ( target.Equals(link.CategoryTransactionAssociation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TransactionSpecReferencesCategoryTransactionAssociation link between a given TransactionSpecand a CategoryTransactionAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation GetLink( global::Empresa.MoneyManagerModel.TransactionSpec source, global::Empresa.MoneyManagerModel.CategoryTransactionAssociation target )
		{
			global::System.Collections.Generic.IList<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation>(source, global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation.TransactionSpecDomainRoleId);
			foreach ( global::Empresa.MoneyManagerModel.TransactionSpecReferencesCategoryTransactionAssociation link in links )
			{
				if ( target.Equals(link.CategoryTransactionAssociation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
