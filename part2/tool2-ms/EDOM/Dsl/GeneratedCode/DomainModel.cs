//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Empresa.MoneyManagerModel
{
	/// <summary>
	/// DomainModel MoneyManagerModelDomainModel
	/// Description for Empresa.MoneyManagerModel.MoneyManagerModel
	/// </summary>
	[DslDesign::DisplayNameResource("Empresa.MoneyManagerModel.MoneyManagerModelDomainModel.DisplayName", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Empresa.MoneyManagerModel.MoneyManagerModelDomainModel.Description", typeof(global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel), "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("9e4c22d7-86e5-477b-81b5-d735e4699daf")]
	public partial class MoneyManagerModelDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// MoneyManagerModelDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x9e4c22d7, 0x86e5, 0x477b, 0x81, 0xb5, 0xd7, 0x35, 0xe4, 0x69, 0x9d, 0xaf);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public MoneyManagerModelDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(Model),
				typeof(UserSpec),
				typeof(AccountSpec),
				typeof(TransactionSpec),
				typeof(AttributeType),
				typeof(UserAttribute),
				typeof(AccountAttribute),
				typeof(TransactionAttribute),
				typeof(AccountGroupSpec),
				typeof(UserAccountAssociation),
				typeof(AccountTransactionAssociation),
				typeof(CategorySpec),
				typeof(CategoryAttribute),
				typeof(CategoryTransactionAssociation),
				typeof(ExampleModelHasElements),
				typeof(ModelTemAccountSpec),
				typeof(ModelHasTransactionSpec),
				typeof(ModelHasAttributeType),
				typeof(UserSpecTemUserAttribute),
				typeof(AccountSpecTemAccountAttribute),
				typeof(TransactionSpecTemTransactionAttribute),
				typeof(UserAttributeReferênciasAttributeTypes),
				typeof(AccountAttributeReferênciasAttributeTypes),
				typeof(TransactionAttributeReferênciasAttributeTypes),
				typeof(ModelHasAccountGroupSpec),
				typeof(AccountGroupSpecReferencesAccountSpec),
				typeof(ModelHasUserAccountAssociation),
				typeof(ModelHasAccountTransactionAssociation),
				typeof(ModelHasCategorySpec),
				typeof(CategoryAttributeReferencesAttributeType1),
				typeof(CategorySpecHasCategoryAttribute),
				typeof(UserSpecReferencesUserAccountAssociation),
				typeof(AccountSpecReferencesUserAccountAssociation),
				typeof(AccountSpecReferencesAccountTransactionAssociation),
				typeof(TransactionSpecReferencesAccountTransactionAssociation),
				typeof(ModelHasCategoryTransactionAssociation),
				typeof(CategorySpecReferencesCategoryTransactionAssociation),
				typeof(TransactionSpecReferencesCategoryTransactionAssociation),
				typeof(MoneyManagerModelDiagram),
				typeof(Incorporação),
				typeof(Referência),
				typeof(UserSpecShape),
				typeof(AccountSpecShape),
				typeof(TransactionSpecShape),
				typeof(AttributeTypeShape),
				typeof(UserAttributeShape),
				typeof(AccountAttributeShape),
				typeof(TransactionAttributeShape),
				typeof(AccountGroupSpecSchape),
				typeof(UserAccountAssociationShape),
				typeof(AccountTransactionAssociationShape),
				typeof(CategorySpecShape),
				typeof(CategoryAttributeShape),
				typeof(CategoryTransactionAssociationShape),
				typeof(global::Empresa.MoneyManagerModel.FixUpDiagram),
				typeof(global::Empresa.MoneyManagerModel.ConnectorRolePlayerChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(Model), "Name", Model.NameDomainPropertyId, typeof(Model.NamePropertyHandler)),
				new DomainMemberInfo(typeof(UserSpec), "CardinalityMax", UserSpec.CardinalityMaxDomainPropertyId, typeof(UserSpec.CardinalityMaxPropertyHandler)),
				new DomainMemberInfo(typeof(UserSpec), "Name", UserSpec.NameDomainPropertyId, typeof(UserSpec.NamePropertyHandler)),
				new DomainMemberInfo(typeof(UserSpec), "CardinalityMin", UserSpec.CardinalityMinDomainPropertyId, typeof(UserSpec.CardinalityMinPropertyHandler)),
				new DomainMemberInfo(typeof(AccountSpec), "CardinalityMax", AccountSpec.CardinalityMaxDomainPropertyId, typeof(AccountSpec.CardinalityMaxPropertyHandler)),
				new DomainMemberInfo(typeof(AccountSpec), "Name", AccountSpec.NameDomainPropertyId, typeof(AccountSpec.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AccountSpec), "CardinalityMin", AccountSpec.CardinalityMinDomainPropertyId, typeof(AccountSpec.CardinalityMinPropertyHandler)),
				new DomainMemberInfo(typeof(AccountSpec), "NeedBanckAccount", AccountSpec.NeedBanckAccountDomainPropertyId, typeof(AccountSpec.NeedBanckAccountPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionSpec), "CardinalityMax", TransactionSpec.CardinalityMaxDomainPropertyId, typeof(TransactionSpec.CardinalityMaxPropertyHandler)),
				new DomainMemberInfo(typeof(TransactionSpec), "Name", TransactionSpec.NameDomainPropertyId, typeof(TransactionSpec.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionSpec), "CardinalityMin", TransactionSpec.CardinalityMinDomainPropertyId, typeof(TransactionSpec.CardinalityMinPropertyHandler)),
				new DomainMemberInfo(typeof(AttributeType), "Text", AttributeType.TextDomainPropertyId, typeof(AttributeType.TextPropertyHandler)),
				new DomainMemberInfo(typeof(AttributeType), "Number", AttributeType.NumberDomainPropertyId, typeof(AttributeType.NumberPropertyHandler)),
				new DomainMemberInfo(typeof(AttributeType), "Choice", AttributeType.ChoiceDomainPropertyId, typeof(AttributeType.ChoicePropertyHandler)),
				new DomainMemberInfo(typeof(AttributeType), "Date", AttributeType.DateDomainPropertyId, typeof(AttributeType.DatePropertyHandler)),
				new DomainMemberInfo(typeof(UserAttribute), "Name", UserAttribute.NameDomainPropertyId, typeof(UserAttribute.NamePropertyHandler)),
				new DomainMemberInfo(typeof(UserAttribute), "AttributeType", UserAttribute.AttributeTypeDomainPropertyId, typeof(UserAttribute.AttributeTypePropertyHandler)),
				new DomainMemberInfo(typeof(AccountAttribute), "Name", AccountAttribute.NameDomainPropertyId, typeof(AccountAttribute.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AccountAttribute), "AttributeType", AccountAttribute.AttributeTypeDomainPropertyId, typeof(AccountAttribute.AttributeTypePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionAttribute), "Name", TransactionAttribute.NameDomainPropertyId, typeof(TransactionAttribute.NamePropertyHandler)),
				new DomainMemberInfo(typeof(TransactionAttribute), "AttributeType", TransactionAttribute.AttributeTypeDomainPropertyId, typeof(TransactionAttribute.AttributeTypePropertyHandler)),
				new DomainMemberInfo(typeof(AccountGroupSpec), "Name", AccountGroupSpec.NameDomainPropertyId, typeof(AccountGroupSpec.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AccountGroupSpec), "CardinalityMin", AccountGroupSpec.CardinalityMinDomainPropertyId, typeof(AccountGroupSpec.CardinalityMinPropertyHandler)),
				new DomainMemberInfo(typeof(AccountGroupSpec), "CardinalityMax", AccountGroupSpec.CardinalityMaxDomainPropertyId, typeof(AccountGroupSpec.CardinalityMaxPropertyHandler)),
				new DomainMemberInfo(typeof(AccountGroupSpec), "needBankAccount", AccountGroupSpec.needBankAccountDomainPropertyId, typeof(AccountGroupSpec.needBankAccountPropertyHandler)),
				new DomainMemberInfo(typeof(UserAccountAssociation), "Name", UserAccountAssociation.NameDomainPropertyId, typeof(UserAccountAssociation.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AccountTransactionAssociation), "Name", AccountTransactionAssociation.NameDomainPropertyId, typeof(AccountTransactionAssociation.NamePropertyHandler)),
				new DomainMemberInfo(typeof(CategorySpec), "Name", CategorySpec.NameDomainPropertyId, typeof(CategorySpec.NamePropertyHandler)),
				new DomainMemberInfo(typeof(CategorySpec), "CardinalityMin", CategorySpec.CardinalityMinDomainPropertyId, typeof(CategorySpec.CardinalityMinPropertyHandler)),
				new DomainMemberInfo(typeof(CategorySpec), "CardinalityMax", CategorySpec.CardinalityMaxDomainPropertyId, typeof(CategorySpec.CardinalityMaxPropertyHandler)),
				new DomainMemberInfo(typeof(CategoryAttribute), "Name", CategoryAttribute.NameDomainPropertyId, typeof(CategoryAttribute.NamePropertyHandler)),
				new DomainMemberInfo(typeof(CategoryAttribute), "AttributeType", CategoryAttribute.AttributeTypeDomainPropertyId, typeof(CategoryAttribute.AttributeTypePropertyHandler)),
				new DomainMemberInfo(typeof(CategoryTransactionAssociation), "Name", CategoryTransactionAssociation.NameDomainPropertyId, typeof(CategoryTransactionAssociation.NamePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ExampleModelHasElements), "Model", ExampleModelHasElements.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ExampleModelHasElements), "Element", ExampleModelHasElements.ElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelTemAccountSpec), "Model", ModelTemAccountSpec.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelTemAccountSpec), "AccountSpec", ModelTemAccountSpec.AccountSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasTransactionSpec), "Model", ModelHasTransactionSpec.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasTransactionSpec), "TransactionSpec", ModelHasTransactionSpec.TransactionSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasAttributeType), "Model", ModelHasAttributeType.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasAttributeType), "AttributeType", ModelHasAttributeType.AttributeTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(UserSpecTemUserAttribute), "UserSpec", UserSpecTemUserAttribute.UserSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(UserSpecTemUserAttribute), "UserAttribute", UserSpecTemUserAttribute.UserAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountSpecTemAccountAttribute), "AccountSpec", AccountSpecTemAccountAttribute.AccountSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountSpecTemAccountAttribute), "AccountAttribute", AccountSpecTemAccountAttribute.AccountAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionSpecTemTransactionAttribute), "TransactionSpec", TransactionSpecTemTransactionAttribute.TransactionSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionSpecTemTransactionAttribute), "TransactionAttribute", TransactionSpecTemTransactionAttribute.TransactionAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(UserAttributeReferênciasAttributeTypes), "UserAttribute", UserAttributeReferênciasAttributeTypes.UserAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(UserAttributeReferênciasAttributeTypes), "AttributeType", UserAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountAttributeReferênciasAttributeTypes), "AccountAttribute", AccountAttributeReferênciasAttributeTypes.AccountAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountAttributeReferênciasAttributeTypes), "AttributeTypes", AccountAttributeReferênciasAttributeTypes.AttributeTypesDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionAttributeReferênciasAttributeTypes), "TransactionAttribute", TransactionAttributeReferênciasAttributeTypes.TransactionAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionAttributeReferênciasAttributeTypes), "AttributeType", TransactionAttributeReferênciasAttributeTypes.AttributeTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasAccountGroupSpec), "Model", ModelHasAccountGroupSpec.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasAccountGroupSpec), "AccountGroupSpec", ModelHasAccountGroupSpec.AccountGroupSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountGroupSpecReferencesAccountSpec), "AccountGroupSpec", AccountGroupSpecReferencesAccountSpec.AccountGroupSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountGroupSpecReferencesAccountSpec), "AccountSpec", AccountGroupSpecReferencesAccountSpec.AccountSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasUserAccountAssociation), "Model", ModelHasUserAccountAssociation.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasUserAccountAssociation), "UserAccountAssociation", ModelHasUserAccountAssociation.UserAccountAssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasAccountTransactionAssociation), "Model", ModelHasAccountTransactionAssociation.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasAccountTransactionAssociation), "AccountTransactionAssociation", ModelHasAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasCategorySpec), "Model", ModelHasCategorySpec.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasCategorySpec), "CategorySpec", ModelHasCategorySpec.CategorySpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(CategoryAttributeReferencesAttributeType1), "CategoryAttribute", CategoryAttributeReferencesAttributeType1.CategoryAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(CategoryAttributeReferencesAttributeType1), "AttributeType", CategoryAttributeReferencesAttributeType1.AttributeTypeDomainRoleId),
				new DomainRolePlayerInfo(typeof(CategorySpecHasCategoryAttribute), "CategorySpec", CategorySpecHasCategoryAttribute.CategorySpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(CategorySpecHasCategoryAttribute), "CategoryAttribute", CategorySpecHasCategoryAttribute.CategoryAttributeDomainRoleId),
				new DomainRolePlayerInfo(typeof(UserSpecReferencesUserAccountAssociation), "UserSpec", UserSpecReferencesUserAccountAssociation.UserSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(UserSpecReferencesUserAccountAssociation), "UserAccountAssociation", UserSpecReferencesUserAccountAssociation.UserAccountAssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountSpecReferencesUserAccountAssociation), "AccountSpec", AccountSpecReferencesUserAccountAssociation.AccountSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountSpecReferencesUserAccountAssociation), "UserAccountAssociation", AccountSpecReferencesUserAccountAssociation.UserAccountAssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountSpecReferencesAccountTransactionAssociation), "AccountSpec", AccountSpecReferencesAccountTransactionAssociation.AccountSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(AccountSpecReferencesAccountTransactionAssociation), "AccountTransactionAssociation", AccountSpecReferencesAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionSpecReferencesAccountTransactionAssociation), "TransactionSpec", TransactionSpecReferencesAccountTransactionAssociation.TransactionSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionSpecReferencesAccountTransactionAssociation), "AccountTransactionAssociation", TransactionSpecReferencesAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasCategoryTransactionAssociation), "Model", ModelHasCategoryTransactionAssociation.ModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(ModelHasCategoryTransactionAssociation), "CategoryTransactionAssociation", ModelHasCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(CategorySpecReferencesCategoryTransactionAssociation), "CategorySpec", CategorySpecReferencesCategoryTransactionAssociation.CategorySpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(CategorySpecReferencesCategoryTransactionAssociation), "CategoryTransactionAssociation", CategorySpecReferencesCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionSpecReferencesCategoryTransactionAssociation), "TransactionSpec", TransactionSpecReferencesCategoryTransactionAssociation.TransactionSpecDomainRoleId),
				new DomainRolePlayerInfo(typeof(TransactionSpecReferencesCategoryTransactionAssociation), "CategoryTransactionAssociation", TransactionSpecReferencesCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(30);
				createElementMap.Add(typeof(Model), 0);
				createElementMap.Add(typeof(UserSpec), 1);
				createElementMap.Add(typeof(AccountSpec), 2);
				createElementMap.Add(typeof(TransactionSpec), 3);
				createElementMap.Add(typeof(AttributeType), 4);
				createElementMap.Add(typeof(UserAttribute), 5);
				createElementMap.Add(typeof(AccountAttribute), 6);
				createElementMap.Add(typeof(TransactionAttribute), 7);
				createElementMap.Add(typeof(AccountGroupSpec), 8);
				createElementMap.Add(typeof(UserAccountAssociation), 9);
				createElementMap.Add(typeof(AccountTransactionAssociation), 10);
				createElementMap.Add(typeof(CategorySpec), 11);
				createElementMap.Add(typeof(CategoryAttribute), 12);
				createElementMap.Add(typeof(CategoryTransactionAssociation), 13);
				createElementMap.Add(typeof(MoneyManagerModelDiagram), 14);
				createElementMap.Add(typeof(Incorporação), 15);
				createElementMap.Add(typeof(Referência), 16);
				createElementMap.Add(typeof(UserSpecShape), 17);
				createElementMap.Add(typeof(AccountSpecShape), 18);
				createElementMap.Add(typeof(TransactionSpecShape), 19);
				createElementMap.Add(typeof(AttributeTypeShape), 20);
				createElementMap.Add(typeof(UserAttributeShape), 21);
				createElementMap.Add(typeof(AccountAttributeShape), 22);
				createElementMap.Add(typeof(TransactionAttributeShape), 23);
				createElementMap.Add(typeof(AccountGroupSpecSchape), 24);
				createElementMap.Add(typeof(UserAccountAssociationShape), 25);
				createElementMap.Add(typeof(AccountTransactionAssociationShape), 26);
				createElementMap.Add(typeof(CategorySpecShape), 27);
				createElementMap.Add(typeof(CategoryAttributeShape), 28);
				createElementMap.Add(typeof(CategoryTransactionAssociationShape), 29);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new Model(partition, propertyAssignments);
				case 1: return new UserSpec(partition, propertyAssignments);
				case 2: return new AccountSpec(partition, propertyAssignments);
				case 3: return new TransactionSpec(partition, propertyAssignments);
				case 4: return new AttributeType(partition, propertyAssignments);
				case 5: return new UserAttribute(partition, propertyAssignments);
				case 6: return new AccountAttribute(partition, propertyAssignments);
				case 7: return new TransactionAttribute(partition, propertyAssignments);
				case 8: return new AccountGroupSpec(partition, propertyAssignments);
				case 9: return new UserAccountAssociation(partition, propertyAssignments);
				case 10: return new AccountTransactionAssociation(partition, propertyAssignments);
				case 11: return new CategorySpec(partition, propertyAssignments);
				case 12: return new CategoryAttribute(partition, propertyAssignments);
				case 13: return new CategoryTransactionAssociation(partition, propertyAssignments);
				case 14: return new MoneyManagerModelDiagram(partition, propertyAssignments);
				case 15: return new Incorporação(partition, propertyAssignments);
				case 16: return new Referência(partition, propertyAssignments);
				case 17: return new UserSpecShape(partition, propertyAssignments);
				case 18: return new AccountSpecShape(partition, propertyAssignments);
				case 19: return new TransactionSpecShape(partition, propertyAssignments);
				case 20: return new AttributeTypeShape(partition, propertyAssignments);
				case 21: return new UserAttributeShape(partition, propertyAssignments);
				case 22: return new AccountAttributeShape(partition, propertyAssignments);
				case 23: return new TransactionAttributeShape(partition, propertyAssignments);
				case 24: return new AccountGroupSpecSchape(partition, propertyAssignments);
				case 25: return new UserAccountAssociationShape(partition, propertyAssignments);
				case 26: return new AccountTransactionAssociationShape(partition, propertyAssignments);
				case 27: return new CategorySpecShape(partition, propertyAssignments);
				case 28: return new CategoryAttributeShape(partition, propertyAssignments);
				case 29: return new CategoryTransactionAssociationShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(24);
				createElementLinkMap.Add(typeof(ExampleModelHasElements), 0);
				createElementLinkMap.Add(typeof(ModelTemAccountSpec), 1);
				createElementLinkMap.Add(typeof(ModelHasTransactionSpec), 2);
				createElementLinkMap.Add(typeof(ModelHasAttributeType), 3);
				createElementLinkMap.Add(typeof(UserSpecTemUserAttribute), 4);
				createElementLinkMap.Add(typeof(AccountSpecTemAccountAttribute), 5);
				createElementLinkMap.Add(typeof(TransactionSpecTemTransactionAttribute), 6);
				createElementLinkMap.Add(typeof(UserAttributeReferênciasAttributeTypes), 7);
				createElementLinkMap.Add(typeof(AccountAttributeReferênciasAttributeTypes), 8);
				createElementLinkMap.Add(typeof(TransactionAttributeReferênciasAttributeTypes), 9);
				createElementLinkMap.Add(typeof(ModelHasAccountGroupSpec), 10);
				createElementLinkMap.Add(typeof(AccountGroupSpecReferencesAccountSpec), 11);
				createElementLinkMap.Add(typeof(ModelHasUserAccountAssociation), 12);
				createElementLinkMap.Add(typeof(ModelHasAccountTransactionAssociation), 13);
				createElementLinkMap.Add(typeof(ModelHasCategorySpec), 14);
				createElementLinkMap.Add(typeof(CategoryAttributeReferencesAttributeType1), 15);
				createElementLinkMap.Add(typeof(CategorySpecHasCategoryAttribute), 16);
				createElementLinkMap.Add(typeof(UserSpecReferencesUserAccountAssociation), 17);
				createElementLinkMap.Add(typeof(AccountSpecReferencesUserAccountAssociation), 18);
				createElementLinkMap.Add(typeof(AccountSpecReferencesAccountTransactionAssociation), 19);
				createElementLinkMap.Add(typeof(TransactionSpecReferencesAccountTransactionAssociation), 20);
				createElementLinkMap.Add(typeof(ModelHasCategoryTransactionAssociation), 21);
				createElementLinkMap.Add(typeof(CategorySpecReferencesCategoryTransactionAssociation), 22);
				createElementLinkMap.Add(typeof(TransactionSpecReferencesCategoryTransactionAssociation), 23);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Empresa.MoneyManagerModel.MoneyManagerModelDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ExampleModelHasElements(partition, roleAssignments, propertyAssignments);
				case 1: return new ModelTemAccountSpec(partition, roleAssignments, propertyAssignments);
				case 2: return new ModelHasTransactionSpec(partition, roleAssignments, propertyAssignments);
				case 3: return new ModelHasAttributeType(partition, roleAssignments, propertyAssignments);
				case 4: return new UserSpecTemUserAttribute(partition, roleAssignments, propertyAssignments);
				case 5: return new AccountSpecTemAccountAttribute(partition, roleAssignments, propertyAssignments);
				case 6: return new TransactionSpecTemTransactionAttribute(partition, roleAssignments, propertyAssignments);
				case 7: return new UserAttributeReferênciasAttributeTypes(partition, roleAssignments, propertyAssignments);
				case 8: return new AccountAttributeReferênciasAttributeTypes(partition, roleAssignments, propertyAssignments);
				case 9: return new TransactionAttributeReferênciasAttributeTypes(partition, roleAssignments, propertyAssignments);
				case 10: return new ModelHasAccountGroupSpec(partition, roleAssignments, propertyAssignments);
				case 11: return new AccountGroupSpecReferencesAccountSpec(partition, roleAssignments, propertyAssignments);
				case 12: return new ModelHasUserAccountAssociation(partition, roleAssignments, propertyAssignments);
				case 13: return new ModelHasAccountTransactionAssociation(partition, roleAssignments, propertyAssignments);
				case 14: return new ModelHasCategorySpec(partition, roleAssignments, propertyAssignments);
				case 15: return new CategoryAttributeReferencesAttributeType1(partition, roleAssignments, propertyAssignments);
				case 16: return new CategorySpecHasCategoryAttribute(partition, roleAssignments, propertyAssignments);
				case 17: return new UserSpecReferencesUserAccountAssociation(partition, roleAssignments, propertyAssignments);
				case 18: return new AccountSpecReferencesUserAccountAssociation(partition, roleAssignments, propertyAssignments);
				case 19: return new AccountSpecReferencesAccountTransactionAssociation(partition, roleAssignments, propertyAssignments);
				case 20: return new TransactionSpecReferencesAccountTransactionAssociation(partition, roleAssignments, propertyAssignments);
				case 21: return new ModelHasCategoryTransactionAssociation(partition, roleAssignments, propertyAssignments);
				case 22: return new CategorySpecReferencesCategoryTransactionAssociation(partition, roleAssignments, propertyAssignments);
				case 23: return new TransactionSpecReferencesCategoryTransactionAssociation(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Empresa.MoneyManagerModel.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return MoneyManagerModelDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (MoneyManagerModelDomainModel.resourceManager == null)
				{
					MoneyManagerModelDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(MoneyManagerModelDomainModel).Assembly);
				}
				return MoneyManagerModelDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return MoneyManagerModelDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return MoneyManagerModelDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (MoneyManagerModelDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new MoneyManagerModelCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					MoneyManagerModelDomainModel.copyClosure = copyFilter;
				}
				return MoneyManagerModelDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (MoneyManagerModelDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new MoneyManagerModelDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					MoneyManagerModelDomainModel.removeClosure = removeFilter;
				}
				return MoneyManagerModelDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Empresa.MoneyManagerModel.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Empresa.MoneyManagerModel.ConnectorRolePlayerChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Empresa.MoneyManagerModel.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Empresa.MoneyManagerModel.ConnectorRolePlayerChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class MoneyManagerModelDeleteClosure : MoneyManagerModelDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyManagerModelDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class MoneyManagerModelDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyManagerModelDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ExampleModelHasElements.ElementDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ModelTemAccountSpec.AccountSpecDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ModelHasTransactionSpec.TransactionSpecDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ModelHasAttributeType.AttributeTypeDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.UserSpecTemUserAttribute.UserAttributeDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.AccountSpecTemAccountAttribute.AccountAttributeDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.TransactionSpecTemTransactionAttribute.TransactionAttributeDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ModelHasAccountGroupSpec.AccountGroupSpecDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ModelHasUserAccountAssociation.UserAccountAssociationDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ModelHasAccountTransactionAssociation.AccountTransactionAssociationDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ModelHasCategorySpec.CategorySpecDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.CategorySpecHasCategoryAttribute.CategoryAttributeDomainRoleId, true);
			DomainRoles.Add(global::Empresa.MoneyManagerModel.ModelHasCategoryTransactionAssociation.CategoryTransactionAssociationDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class MoneyManagerModelCopyClosure : MoneyManagerModelCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyManagerModelCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class MoneyManagerModelCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MoneyManagerModelCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

