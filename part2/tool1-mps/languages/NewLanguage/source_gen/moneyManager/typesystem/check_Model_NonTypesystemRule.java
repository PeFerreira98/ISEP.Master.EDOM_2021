package moneyManager.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Model_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Model_NonTypesystemRule() {
  }
  public void applyRule(final SNode model, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode userSimbling : ListSequence.fromList(SNodeOperations.getAllSiblings(model, false))) {
      SNode sibling = ((SNode) userSimbling);

      if (SPropertyOperations.getString(sibling, PROPS.name$MnvL).equals(SPropertyOperations.getString(model, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(model, "There is already a " + SNodeOperations.getConcept(model).getName() + " with this name: " + SPropertyOperations.getString(sibling, PROPS.name$MnvL), "r:2a14342b-a65f-4017-82a3-0a33a55ab1c8(moneyManager.typesystem)", "6227873571042093388", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("moneyManager.typesystem.DeleteUniqueModel_QuickFix", "8653132035600374544", false);
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      }
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Model$ef;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Model$ef = MetaAdapterFactory.getConcept(0x9a5f9a2ebfeb4763L, 0xbcb7ba78024d6876L, 0x781619bd78713101L, "moneyManager.structure.Model");
  }
}
